"""Fix foreign key ambiguity

Revision ID: 10bf25c9f6c8
Revises: 1c8bc918f47c
Create Date: 2025-07-28 18:11:54.818089

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '10bf25c9f6c8'
down_revision = '97ef96b8d3df'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('allocations', schema=None) as batch_op:
        batch_op.alter_column('asset_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_column('returned_at')

    with op.batch_alter_table('requests', schema=None) as batch_op:
        batch_op.alter_column('status',
               existing_type=postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', 'FULFILLED', name='requeststatus'),
               type_=sa.String(length=50),
               existing_nullable=True)
        batch_op.alter_column('request_type',
               existing_type=postgresql.ENUM('NEW', 'REPAIR', name='requesttype'),
               type_=sa.String(length=50),
               nullable=True)
        batch_op.alter_column('urgency',
               existing_type=postgresql.ENUM('LOW', 'MEDIUM', 'HIGH', name='urgencylevel'),
               type_=sa.String(length=50),
               nullable=True)
        batch_op.drop_constraint(batch_op.f('requests_approved_by_fkey'), type_='foreignkey')
        batch_op.drop_column('fulfilled_at')
        batch_op.drop_column('approved_by')
        batch_op.drop_column('reason')
        batch_op.drop_column('estimated_cost')
        batch_op.drop_column('finance_approved')
        batch_op.drop_column('approved_at')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('requests', schema=None) as batch_op:
        batch_op.add_column(sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('finance_approved', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('estimated_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('fulfilled_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key(batch_op.f('requests_approved_by_fkey'), 'users', ['approved_by'], ['id'])
        batch_op.alter_column('urgency',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('LOW', 'MEDIUM', 'HIGH', name='urgencylevel'),
               nullable=False)
        batch_op.alter_column('request_type',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('NEW', 'REPAIR', name='requesttype'),
               nullable=False)
        batch_op.alter_column('status',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', 'FULFILLED', name='requeststatus'),
               existing_nullable=True)

    with op.batch_alter_table('allocations', schema=None) as batch_op:
        batch_op.add_column(sa.Column('returned_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('asset_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    # ### end Alembic commands ###
