import React, { createContext, useContext, useState } from 'react';
const AuthContext = /*#__PURE__*/createContext(undefined);
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
export const AuthProvider = ({
  children
}) => {
  // Mock user for demo purposes - skip login
  const [user, setUser] = useState({
    id: 1,
    name: 'Demo Admin',
    email: 'admin@example.com',
    role: 'Admin',
    created_at: new Date().toISOString()
  });
  const [token, setToken] = useState('demo-token');
  const [isLoading, setIsLoading] = useState(false);
  const API_BASE = 'http://localhost:5000'; // Adjust to your Flask API URL

  const fetchUser = async () => {
    try {
      const response = await fetch(`${API_BASE}/auth/me`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      if (response.ok) {
        const userData = await response.json();
        setUser(userData);
      } else {
        localStorage.removeItem('token');
        setToken(null);
      }
    } catch (error) {
      console.error('Failed to fetch user:', error);
      localStorage.removeItem('token');
      setToken(null);
    } finally {
      setIsLoading(false);
    }
  };
  const login = async (email, password) => {
    try {
      const response = await fetch(`${API_BASE}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email,
          password
        })
      });
      if (response.ok) {
        const data = await response.json();
        const newToken = data.access_token;
        localStorage.setItem('token', newToken);
        setToken(newToken);
        return true;
      } else {
        return false;
      }
    } catch (error) {
      console.error('Login failed:', error);
      return false;
    }
  };
  const switchRole = role => {
    setUser(prev => prev ? {
      ...prev,
      role,
      name: `Demo ${role}`
    } : null);
  };
  const logout = () => {
    localStorage.removeItem('token');
    setToken(null);
    setUser(null);
  };
  const value = {
    user,
    token,
    login,
    logout,
    switchRole,
    isLoading
  };
  return /*#__PURE__*/React.createElement(AuthContext.Provider, {
    value: value
  }, children);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,