import React from 'react';
import { useSelector } from '../contexts/AuthContext';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { Badge } from '../components/ui/badge';
import { Users, Shield, CreditCard, User } from 'lucide-react';
const RoleSwitcher = () => {
  const {
    user,
    switchRole
  } = useAuth();
  const roles = [{
    value: 'Admin',
    label: 'Admin',
    icon: Shield,
    color: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
  }, {
    value: 'Procurement',
    label: 'Procurement',
    icon: Users,
    color: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300'
  }, {
    value: 'Finance',
    label: 'Finance',
    icon: CreditCard,
    color: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300'
  }, {
    value: 'Employee',
    label: 'Employee',
    icon: User,
    color: 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300'
  }];
  const currentRole = roles.find(role => role.value === user?.role);
  return /*#__PURE__*/React.createElement("div", {
    className: "flex items-center gap-3"
  }, /*#__PURE__*/React.createElement(Badge, {
    className: currentRole?.color
  }, currentRole && /*#__PURE__*/React.createElement(currentRole.icon, {
    className: "h-3 w-3 mr-1"
  }), user?.role), /*#__PURE__*/React.createElement(Select, {
    value: user?.role,
    onValueChange: value => switchRole(value)
  }, /*#__PURE__*/React.createElement(SelectTrigger, {
    className: "w-[140px]"
  }, /*#__PURE__*/React.createElement(SelectValue, {
    placeholder: "Switch Role"
  })), /*#__PURE__*/React.createElement(SelectContent, null, roles.map(role => /*#__PURE__*/React.createElement(SelectItem, {
    key: role.value,
    value: role.value
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex items-center gap-2"
  }, /*#__PURE__*/React.createElement(role.icon, {
    className: "h-4 w-4"
  }), role.label))))));
};
export default RoleSwitcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInVzZUF1dGgiLCJTZWxlY3QiLCJTZWxlY3RDb250ZW50IiwiU2VsZWN0SXRlbSIsIlNlbGVjdFRyaWdnZXIiLCJTZWxlY3RWYWx1ZSIsIkJhZGdlIiwiVXNlcnMiLCJTaGllbGQiLCJDcmVkaXRDYXJkIiwiVXNlciIsIlJvbGVTd2l0Y2hlciIsInVzZXIiLCJzd2l0Y2hSb2xlIiwicm9sZXMiLCJ2YWx1ZSIsImxhYmVsIiwiaWNvbiIsImNvbG9yIiwiY3VycmVudFJvbGUiLCJmaW5kIiwicm9sZSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJvblZhbHVlQ2hhbmdlIiwicGxhY2Vob2xkZXIiLCJtYXAiLCJrZXkiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcG9uZW50cy9Sb2xlU3dpdGNoZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSAnQC9jb250ZXh0cy9BdXRoQ29udGV4dCc7XG5pbXBvcnQgeyBTZWxlY3QsIFNlbGVjdENvbnRlbnQsIFNlbGVjdEl0ZW0sIFNlbGVjdFRyaWdnZXIsIFNlbGVjdFZhbHVlIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3NlbGVjdCc7XG5pbXBvcnQgeyBCYWRnZSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9iYWRnZSc7XG5pbXBvcnQgeyBVc2VycywgU2hpZWxkLCBDcmVkaXRDYXJkLCBVc2VyIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcblxuY29uc3QgUm9sZVN3aXRjaGVyOiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgY29uc3QgeyB1c2VyLCBzd2l0Y2hSb2xlIH0gPSB1c2VBdXRoKCk7XG5cbiAgY29uc3Qgcm9sZXMgPSBbXG4gICAgeyB2YWx1ZTogJ0FkbWluJywgbGFiZWw6ICdBZG1pbicsIGljb246IFNoaWVsZCwgY29sb3I6ICdiZy1yZWQtMTAwIHRleHQtcmVkLTgwMCBkYXJrOmJnLXJlZC05MDAgZGFyazp0ZXh0LXJlZC0zMDAnIH0sXG4gICAgeyB2YWx1ZTogJ1Byb2N1cmVtZW50JywgbGFiZWw6ICdQcm9jdXJlbWVudCcsIGljb246IFVzZXJzLCBjb2xvcjogJ2JnLWJsdWUtMTAwIHRleHQtYmx1ZS04MDAgZGFyazpiZy1ibHVlLTkwMCBkYXJrOnRleHQtYmx1ZS0zMDAnIH0sXG4gICAgeyB2YWx1ZTogJ0ZpbmFuY2UnLCBsYWJlbDogJ0ZpbmFuY2UnLCBpY29uOiBDcmVkaXRDYXJkLCBjb2xvcjogJ2JnLWdyZWVuLTEwMCB0ZXh0LWdyZWVuLTgwMCBkYXJrOmJnLWdyZWVuLTkwMCBkYXJrOnRleHQtZ3JlZW4tMzAwJyB9LFxuICAgIHsgdmFsdWU6ICdFbXBsb3llZScsIGxhYmVsOiAnRW1wbG95ZWUnLCBpY29uOiBVc2VyLCBjb2xvcjogJ2JnLWdyYXktMTAwIHRleHQtZ3JheS04MDAgZGFyazpiZy1ncmF5LTkwMCBkYXJrOnRleHQtZ3JheS0zMDAnIH1cbiAgXTtcblxuICBjb25zdCBjdXJyZW50Um9sZSA9IHJvbGVzLmZpbmQocm9sZSA9PiByb2xlLnZhbHVlID09PSB1c2VyPy5yb2xlKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTNcIj5cbiAgICAgIDxCYWRnZSBjbGFzc05hbWU9e2N1cnJlbnRSb2xlPy5jb2xvcn0+XG4gICAgICAgIHtjdXJyZW50Um9sZSAmJiA8Y3VycmVudFJvbGUuaWNvbiBjbGFzc05hbWU9XCJoLTMgdy0zIG1yLTFcIiAvPn1cbiAgICAgICAge3VzZXI/LnJvbGV9XG4gICAgICA8L0JhZGdlPlxuICAgICAgPFNlbGVjdCB2YWx1ZT17dXNlcj8ucm9sZX0gb25WYWx1ZUNoYW5nZT17KHZhbHVlKSA9PiBzd2l0Y2hSb2xlKHZhbHVlIGFzIGFueSl9PlxuICAgICAgICA8U2VsZWN0VHJpZ2dlciBjbGFzc05hbWU9XCJ3LVsxNDBweF1cIj5cbiAgICAgICAgICA8U2VsZWN0VmFsdWUgcGxhY2Vob2xkZXI9XCJTd2l0Y2ggUm9sZVwiIC8+XG4gICAgICAgIDwvU2VsZWN0VHJpZ2dlcj5cbiAgICAgICAgPFNlbGVjdENvbnRlbnQ+XG4gICAgICAgICAge3JvbGVzLm1hcCgocm9sZSkgPT4gKFxuICAgICAgICAgICAgPFNlbGVjdEl0ZW0ga2V5PXtyb2xlLnZhbHVlfSB2YWx1ZT17cm9sZS52YWx1ZX0+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICAgICAgICAgICAgICA8cm9sZS5pY29uIGNsYXNzTmFtZT1cImgtNCB3LTRcIiAvPlxuICAgICAgICAgICAgICAgIHtyb2xlLmxhYmVsfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvU2VsZWN0SXRlbT5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9TZWxlY3RDb250ZW50PlxuICAgICAgPC9TZWxlY3Q+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSb2xlU3dpdGNoZXI7Il0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFLLE1BQU0sT0FBTztBQUN6QixTQUFTQyxPQUFPLFFBQVEsd0JBQXdCO0FBQ2hELFNBQVNDLE1BQU0sRUFBRUMsYUFBYSxFQUFFQyxVQUFVLEVBQUVDLGFBQWEsRUFBRUMsV0FBVyxRQUFRLHdCQUF3QjtBQUN0RyxTQUFTQyxLQUFLLFFBQVEsdUJBQXVCO0FBQzdDLFNBQVNDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLElBQUksUUFBUSxjQUFjO0FBRTlELE1BQU1DLFlBQXNCLEdBQUdBLENBQUEsS0FBTTtFQUNuQyxNQUFNO0lBQUVDLElBQUk7SUFBRUM7RUFBVyxDQUFDLEdBQUdiLE9BQU8sQ0FBQyxDQUFDO0VBRXRDLE1BQU1jLEtBQUssR0FBRyxDQUNaO0lBQUVDLEtBQUssRUFBRSxPQUFPO0lBQUVDLEtBQUssRUFBRSxPQUFPO0lBQUVDLElBQUksRUFBRVQsTUFBTTtJQUFFVSxLQUFLLEVBQUU7RUFBNEQsQ0FBQyxFQUNwSDtJQUFFSCxLQUFLLEVBQUUsYUFBYTtJQUFFQyxLQUFLLEVBQUUsYUFBYTtJQUFFQyxJQUFJLEVBQUVWLEtBQUs7SUFBRVcsS0FBSyxFQUFFO0VBQWdFLENBQUMsRUFDbkk7SUFBRUgsS0FBSyxFQUFFLFNBQVM7SUFBRUMsS0FBSyxFQUFFLFNBQVM7SUFBRUMsSUFBSSxFQUFFUixVQUFVO0lBQUVTLEtBQUssRUFBRTtFQUFvRSxDQUFDLEVBQ3BJO0lBQUVILEtBQUssRUFBRSxVQUFVO0lBQUVDLEtBQUssRUFBRSxVQUFVO0lBQUVDLElBQUksRUFBRVAsSUFBSTtJQUFFUSxLQUFLLEVBQUU7RUFBZ0UsQ0FBQyxDQUM3SDtFQUVELE1BQU1DLFdBQVcsR0FBR0wsS0FBSyxDQUFDTSxJQUFJLENBQUNDLElBQUksSUFBSUEsSUFBSSxDQUFDTixLQUFLLEtBQUtILElBQUksRUFBRVMsSUFBSSxDQUFDO0VBRWpFLG9CQUNFdEIsS0FBQSxDQUFBdUIsYUFBQTtJQUFLQyxTQUFTLEVBQUM7RUFBeUIsZ0JBQ3RDeEIsS0FBQSxDQUFBdUIsYUFBQSxDQUFDaEIsS0FBSztJQUFDaUIsU0FBUyxFQUFFSixXQUFXLEVBQUVEO0VBQU0sR0FDbENDLFdBQVcsaUJBQUlwQixLQUFBLENBQUF1QixhQUFBLENBQUNILFdBQVcsQ0FBQ0YsSUFBSTtJQUFDTSxTQUFTLEVBQUM7RUFBYyxDQUFFLENBQUMsRUFDNURYLElBQUksRUFBRVMsSUFDRixDQUFDLGVBQ1J0QixLQUFBLENBQUF1QixhQUFBLENBQUNyQixNQUFNO0lBQUNjLEtBQUssRUFBRUgsSUFBSSxFQUFFUyxJQUFLO0lBQUNHLGFBQWEsRUFBR1QsS0FBSyxJQUFLRixVQUFVLENBQUNFLEtBQVk7RUFBRSxnQkFDNUVoQixLQUFBLENBQUF1QixhQUFBLENBQUNsQixhQUFhO0lBQUNtQixTQUFTLEVBQUM7RUFBVyxnQkFDbEN4QixLQUFBLENBQUF1QixhQUFBLENBQUNqQixXQUFXO0lBQUNvQixXQUFXLEVBQUM7RUFBYSxDQUFFLENBQzNCLENBQUMsZUFDaEIxQixLQUFBLENBQUF1QixhQUFBLENBQUNwQixhQUFhLFFBQ1hZLEtBQUssQ0FBQ1ksR0FBRyxDQUFFTCxJQUFJLGlCQUNkdEIsS0FBQSxDQUFBdUIsYUFBQSxDQUFDbkIsVUFBVTtJQUFDd0IsR0FBRyxFQUFFTixJQUFJLENBQUNOLEtBQU07SUFBQ0EsS0FBSyxFQUFFTSxJQUFJLENBQUNOO0VBQU0sZ0JBQzdDaEIsS0FBQSxDQUFBdUIsYUFBQTtJQUFLQyxTQUFTLEVBQUM7RUFBeUIsZ0JBQ3RDeEIsS0FBQSxDQUFBdUIsYUFBQSxDQUFDRCxJQUFJLENBQUNKLElBQUk7SUFBQ00sU0FBUyxFQUFDO0VBQVMsQ0FBRSxDQUFDLEVBQ2hDRixJQUFJLENBQUNMLEtBQ0gsQ0FDSyxDQUNiLENBQ1ksQ0FDVCxDQUNMLENBQUM7QUFFVixDQUFDO0FBRUQsZUFBZUwsWUFBWSIsImlnbm9yZUxpc3QiOltdfQ==