function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";
import { cn } from "@/lib/utils";
const ScrollArea = /*#__PURE__*/React.forwardRef(({
  className,
  children,
  ...props
}, ref) => /*#__PURE__*/React.createElement(ScrollAreaPrimitive.Root, _extends({
  ref: ref,
  className: cn("relative overflow-hidden", className)
}, props), /*#__PURE__*/React.createElement(ScrollAreaPrimitive.Viewport, {
  className: "h-full w-full rounded-[inherit]"
}, children), /*#__PURE__*/React.createElement(ScrollBar, null), /*#__PURE__*/React.createElement(ScrollAreaPrimitive.Corner, null)));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;
const ScrollBar = /*#__PURE__*/React.forwardRef(({
  className,
  orientation = "vertical",
  ...props
}, ref) => /*#__PURE__*/React.createElement(ScrollAreaPrimitive.ScrollAreaScrollbar, _extends({
  ref: ref,
  orientation: orientation,
  className: cn("flex touch-none select-none transition-colors", orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]", orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-[1px]", className)
}, props), /*#__PURE__*/React.createElement(ScrollAreaPrimitive.ScrollAreaThumb, {
  className: "relative flex-1 rounded-full bg-border"
})));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;
export { ScrollArea, ScrollBar };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIlNjcm9sbEFyZWFQcmltaXRpdmUiLCJjbiIsIlNjcm9sbEFyZWEiLCJmb3J3YXJkUmVmIiwiY2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJwcm9wcyIsInJlZiIsImNyZWF0ZUVsZW1lbnQiLCJSb290IiwiX2V4dGVuZHMiLCJWaWV3cG9ydCIsIlNjcm9sbEJhciIsIkNvcm5lciIsImRpc3BsYXlOYW1lIiwib3JpZW50YXRpb24iLCJTY3JvbGxBcmVhU2Nyb2xsYmFyIiwiU2Nyb2xsQXJlYVRodW1iIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdWkvc2Nyb2xsLWFyZWEudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgKiBhcyBTY3JvbGxBcmVhUHJpbWl0aXZlIGZyb20gXCJAcmFkaXgtdWkvcmVhY3Qtc2Nyb2xsLWFyZWFcIlxuXG5pbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYi91dGlsc1wiXG5cbmNvbnN0IFNjcm9sbEFyZWEgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBTY3JvbGxBcmVhUHJpbWl0aXZlLlJvb3Q+LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIFNjcm9sbEFyZWFQcmltaXRpdmUuUm9vdD5cbj4oKHsgY2xhc3NOYW1lLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxTY3JvbGxBcmVhUHJpbWl0aXZlLlJvb3RcbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2NuKFwicmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuXCIsIGNsYXNzTmFtZSl9XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPFNjcm9sbEFyZWFQcmltaXRpdmUuVmlld3BvcnQgY2xhc3NOYW1lPVwiaC1mdWxsIHctZnVsbCByb3VuZGVkLVtpbmhlcml0XVwiPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvU2Nyb2xsQXJlYVByaW1pdGl2ZS5WaWV3cG9ydD5cbiAgICA8U2Nyb2xsQmFyIC8+XG4gICAgPFNjcm9sbEFyZWFQcmltaXRpdmUuQ29ybmVyIC8+XG4gIDwvU2Nyb2xsQXJlYVByaW1pdGl2ZS5Sb290PlxuKSlcblNjcm9sbEFyZWEuZGlzcGxheU5hbWUgPSBTY3JvbGxBcmVhUHJpbWl0aXZlLlJvb3QuZGlzcGxheU5hbWVcblxuY29uc3QgU2Nyb2xsQmFyID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgU2Nyb2xsQXJlYVByaW1pdGl2ZS5TY3JvbGxBcmVhU2Nyb2xsYmFyPixcbiAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBTY3JvbGxBcmVhUHJpbWl0aXZlLlNjcm9sbEFyZWFTY3JvbGxiYXI+XG4+KCh7IGNsYXNzTmFtZSwgb3JpZW50YXRpb24gPSBcInZlcnRpY2FsXCIsIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICA8U2Nyb2xsQXJlYVByaW1pdGl2ZS5TY3JvbGxBcmVhU2Nyb2xsYmFyXG4gICAgcmVmPXtyZWZ9XG4gICAgb3JpZW50YXRpb249e29yaWVudGF0aW9ufVxuICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICBcImZsZXggdG91Y2gtbm9uZSBzZWxlY3Qtbm9uZSB0cmFuc2l0aW9uLWNvbG9yc1wiLFxuICAgICAgb3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIiAmJlxuICAgICAgICBcImgtZnVsbCB3LTIuNSBib3JkZXItbCBib3JkZXItbC10cmFuc3BhcmVudCBwLVsxcHhdXCIsXG4gICAgICBvcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIgJiZcbiAgICAgICAgXCJoLTIuNSBmbGV4LWNvbCBib3JkZXItdCBib3JkZXItdC10cmFuc3BhcmVudCBwLVsxcHhdXCIsXG4gICAgICBjbGFzc05hbWVcbiAgICApfVxuICAgIHsuLi5wcm9wc31cbiAgPlxuICAgIDxTY3JvbGxBcmVhUHJpbWl0aXZlLlNjcm9sbEFyZWFUaHVtYiBjbGFzc05hbWU9XCJyZWxhdGl2ZSBmbGV4LTEgcm91bmRlZC1mdWxsIGJnLWJvcmRlclwiIC8+XG4gIDwvU2Nyb2xsQXJlYVByaW1pdGl2ZS5TY3JvbGxBcmVhU2Nyb2xsYmFyPlxuKSlcblNjcm9sbEJhci5kaXNwbGF5TmFtZSA9IFNjcm9sbEFyZWFQcmltaXRpdmUuU2Nyb2xsQXJlYVNjcm9sbGJhci5kaXNwbGF5TmFtZVxuXG5leHBvcnQgeyBTY3JvbGxBcmVhLCBTY3JvbGxCYXIgfVxuIl0sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxLQUFLQSxLQUFLLE1BQU0sT0FBTztBQUM5QixPQUFPLEtBQUtDLG1CQUFtQixNQUFNLDZCQUE2QjtBQUVsRSxTQUFTQyxFQUFFLFFBQVEsYUFBYTtBQUVoQyxNQUFNQyxVQUFVLGdCQUFHSCxLQUFLLENBQUNJLFVBQVUsQ0FHakMsQ0FBQztFQUFFQyxTQUFTO0VBQUVDLFFBQVE7RUFBRSxHQUFHQztBQUFNLENBQUMsRUFBRUMsR0FBRyxrQkFDdkNSLEtBQUEsQ0FBQVMsYUFBQSxDQUFDUixtQkFBbUIsQ0FBQ1MsSUFBSSxFQUFBQyxRQUFBO0VBQ3ZCSCxHQUFHLEVBQUVBLEdBQUk7RUFDVEgsU0FBUyxFQUFFSCxFQUFFLENBQUMsMEJBQTBCLEVBQUVHLFNBQVM7QUFBRSxHQUNqREUsS0FBSyxnQkFFVFAsS0FBQSxDQUFBUyxhQUFBLENBQUNSLG1CQUFtQixDQUFDVyxRQUFRO0VBQUNQLFNBQVMsRUFBQztBQUFpQyxHQUN0RUMsUUFDMkIsQ0FBQyxlQUMvQk4sS0FBQSxDQUFBUyxhQUFBLENBQUNJLFNBQVMsTUFBRSxDQUFDLGVBQ2JiLEtBQUEsQ0FBQVMsYUFBQSxDQUFDUixtQkFBbUIsQ0FBQ2EsTUFBTSxNQUFFLENBQ0wsQ0FDM0IsQ0FBQztBQUNGWCxVQUFVLENBQUNZLFdBQVcsR0FBR2QsbUJBQW1CLENBQUNTLElBQUksQ0FBQ0ssV0FBVztBQUU3RCxNQUFNRixTQUFTLGdCQUFHYixLQUFLLENBQUNJLFVBQVUsQ0FHaEMsQ0FBQztFQUFFQyxTQUFTO0VBQUVXLFdBQVcsR0FBRyxVQUFVO0VBQUUsR0FBR1Q7QUFBTSxDQUFDLEVBQUVDLEdBQUcsa0JBQ3ZEUixLQUFBLENBQUFTLGFBQUEsQ0FBQ1IsbUJBQW1CLENBQUNnQixtQkFBbUIsRUFBQU4sUUFBQTtFQUN0Q0gsR0FBRyxFQUFFQSxHQUFJO0VBQ1RRLFdBQVcsRUFBRUEsV0FBWTtFQUN6QlgsU0FBUyxFQUFFSCxFQUFFLENBQ1gsK0NBQStDLEVBQy9DYyxXQUFXLEtBQUssVUFBVSxJQUN4QixvREFBb0QsRUFDdERBLFdBQVcsS0FBSyxZQUFZLElBQzFCLHNEQUFzRCxFQUN4RFgsU0FDRjtBQUFFLEdBQ0VFLEtBQUssZ0JBRVRQLEtBQUEsQ0FBQVMsYUFBQSxDQUFDUixtQkFBbUIsQ0FBQ2lCLGVBQWU7RUFBQ2IsU0FBUyxFQUFDO0FBQXdDLENBQUUsQ0FDbEQsQ0FDMUMsQ0FBQztBQUNGUSxTQUFTLENBQUNFLFdBQVcsR0FBR2QsbUJBQW1CLENBQUNnQixtQkFBbUIsQ0FBQ0YsV0FBVztBQUUzRSxTQUFTWixVQUFVLEVBQUVVLFNBQVMiLCJpZ25vcmVMaXN0IjpbXX0=