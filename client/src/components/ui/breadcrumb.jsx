function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { ChevronRight, MoreHorizontal } from "lucide-react";
import { cn } from "../../lib/utils";
const Breadcrumb = /*#__PURE__*/React.forwardRef(({
  ...props
}, ref) => /*#__PURE__*/React.createElement("nav", _extends({
  ref: ref,
  "aria-label": "breadcrumb"
}, props)));
Breadcrumb.displayName = "Breadcrumb";
const BreadcrumbList = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement("ol", _extends({
  ref: ref,
  className: cn("flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5", className)
}, props)));
BreadcrumbList.displayName = "BreadcrumbList";
const BreadcrumbItem = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement("li", _extends({
  ref: ref,
  className: cn("inline-flex items-center gap-1.5", className)
}, props)));
BreadcrumbItem.displayName = "BreadcrumbItem";
const BreadcrumbLink = /*#__PURE__*/React.forwardRef(({
  asChild,
  className,
  ...props
}, ref) => {
  const Comp = asChild ? Slot : "a";
  return /*#__PURE__*/React.createElement(Comp, _extends({
    ref: ref,
    className: cn("transition-colors hover:text-foreground", className)
  }, props));
});
BreadcrumbLink.displayName = "BreadcrumbLink";
const BreadcrumbPage = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement("span", _extends({
  ref: ref,
  role: "link",
  "aria-disabled": "true",
  "aria-current": "page",
  className: cn("font-normal text-foreground", className)
}, props)));
BreadcrumbPage.displayName = "BreadcrumbPage";
const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}) => /*#__PURE__*/React.createElement("li", _extends({
  role: "presentation",
  "aria-hidden": "true",
  className: cn("[&>svg]:size-3.5", className)
}, props), children ?? /*#__PURE__*/React.createElement(ChevronRight, null));
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";
const BreadcrumbEllipsis = ({
  className,
  ...props
}) => /*#__PURE__*/React.createElement("span", _extends({
  role: "presentation",
  "aria-hidden": "true",
  className: cn("flex h-9 w-9 items-center justify-center", className)
}, props), /*#__PURE__*/React.createElement(MoreHorizontal, {
  className: "h-4 w-4"
}), /*#__PURE__*/React.createElement("span", {
  className: "sr-only"
}, "More"));
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis";
export { Breadcrumb, BreadcrumbList, BreadcrumbItem, BreadcrumbLink, BreadcrumbPage, BreadcrumbSeparator, BreadcrumbEllipsis };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIlNsb3QiLCJDaGV2cm9uUmlnaHQiLCJNb3JlSG9yaXpvbnRhbCIsImNuIiwiQnJlYWRjcnVtYiIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsImNyZWF0ZUVsZW1lbnQiLCJfZXh0ZW5kcyIsImRpc3BsYXlOYW1lIiwiQnJlYWRjcnVtYkxpc3QiLCJjbGFzc05hbWUiLCJCcmVhZGNydW1iSXRlbSIsIkJyZWFkY3J1bWJMaW5rIiwiYXNDaGlsZCIsIkNvbXAiLCJCcmVhZGNydW1iUGFnZSIsInJvbGUiLCJCcmVhZGNydW1iU2VwYXJhdG9yIiwiY2hpbGRyZW4iLCJCcmVhZGNydW1iRWxsaXBzaXMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9icmVhZGNydW1iLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgU2xvdCB9IGZyb20gXCJAcmFkaXgtdWkvcmVhY3Qtc2xvdFwiXG5pbXBvcnQgeyBDaGV2cm9uUmlnaHQsIE1vcmVIb3Jpem9udGFsIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiXG5cbmltcG9ydCB7IGNuIH0gZnJvbSBcIkAvbGliL3V0aWxzXCJcblxuY29uc3QgQnJlYWRjcnVtYiA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIEhUTUxFbGVtZW50LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8XCJuYXZcIj4gJiB7XG4gICAgc2VwYXJhdG9yPzogUmVhY3QuUmVhY3ROb2RlXG4gIH1cbj4oKHsgLi4ucHJvcHMgfSwgcmVmKSA9PiA8bmF2IHJlZj17cmVmfSBhcmlhLWxhYmVsPVwiYnJlYWRjcnVtYlwiIHsuLi5wcm9wc30gLz4pXG5CcmVhZGNydW1iLmRpc3BsYXlOYW1lID0gXCJCcmVhZGNydW1iXCJcblxuY29uc3QgQnJlYWRjcnVtYkxpc3QgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBIVE1MT0xpc3RFbGVtZW50LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8XCJvbFwiPlxuPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICA8b2xcbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgXCJmbGV4IGZsZXgtd3JhcCBpdGVtcy1jZW50ZXIgZ2FwLTEuNSBicmVhay13b3JkcyB0ZXh0LXNtIHRleHQtbXV0ZWQtZm9yZWdyb3VuZCBzbTpnYXAtMi41XCIsXG4gICAgICBjbGFzc05hbWVcbiAgICApfVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbikpXG5CcmVhZGNydW1iTGlzdC5kaXNwbGF5TmFtZSA9IFwiQnJlYWRjcnVtYkxpc3RcIlxuXG5jb25zdCBCcmVhZGNydW1iSXRlbSA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIEhUTUxMSUVsZW1lbnQsXG4gIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjxcImxpXCI+XG4+KCh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxsaVxuICAgIHJlZj17cmVmfVxuICAgIGNsYXNzTmFtZT17Y24oXCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTEuNVwiLCBjbGFzc05hbWUpfVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbikpXG5CcmVhZGNydW1iSXRlbS5kaXNwbGF5TmFtZSA9IFwiQnJlYWRjcnVtYkl0ZW1cIlxuXG5jb25zdCBCcmVhZGNydW1iTGluayA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIEhUTUxBbmNob3JFbGVtZW50LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8XCJhXCI+ICYge1xuICAgIGFzQ2hpbGQ/OiBib29sZWFuXG4gIH1cbj4oKHsgYXNDaGlsZCwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IHtcbiAgY29uc3QgQ29tcCA9IGFzQ2hpbGQgPyBTbG90IDogXCJhXCJcblxuICByZXR1cm4gKFxuICAgIDxDb21wXG4gICAgICByZWY9e3JlZn1cbiAgICAgIGNsYXNzTmFtZT17Y24oXCJ0cmFuc2l0aW9uLWNvbG9ycyBob3Zlcjp0ZXh0LWZvcmVncm91bmRcIiwgY2xhc3NOYW1lKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAvPlxuICApXG59KVxuQnJlYWRjcnVtYkxpbmsuZGlzcGxheU5hbWUgPSBcIkJyZWFkY3J1bWJMaW5rXCJcblxuY29uc3QgQnJlYWRjcnVtYlBhZ2UgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBIVE1MU3BhbkVsZW1lbnQsXG4gIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjxcInNwYW5cIj5cbj4oKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IChcbiAgPHNwYW5cbiAgICByZWY9e3JlZn1cbiAgICByb2xlPVwibGlua1wiXG4gICAgYXJpYS1kaXNhYmxlZD1cInRydWVcIlxuICAgIGFyaWEtY3VycmVudD1cInBhZ2VcIlxuICAgIGNsYXNzTmFtZT17Y24oXCJmb250LW5vcm1hbCB0ZXh0LWZvcmVncm91bmRcIiwgY2xhc3NOYW1lKX1cbiAgICB7Li4ucHJvcHN9XG4gIC8+XG4pKVxuQnJlYWRjcnVtYlBhZ2UuZGlzcGxheU5hbWUgPSBcIkJyZWFkY3J1bWJQYWdlXCJcblxuY29uc3QgQnJlYWRjcnVtYlNlcGFyYXRvciA9ICh7XG4gIGNoaWxkcmVuLFxuICBjbGFzc05hbWUsXG4gIC4uLnByb3BzXG59OiBSZWFjdC5Db21wb25lbnRQcm9wczxcImxpXCI+KSA9PiAoXG4gIDxsaVxuICAgIHJvbGU9XCJwcmVzZW50YXRpb25cIlxuICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgY2xhc3NOYW1lPXtjbihcIlsmPnN2Z106c2l6ZS0zLjVcIiwgY2xhc3NOYW1lKX1cbiAgICB7Li4ucHJvcHN9XG4gID5cbiAgICB7Y2hpbGRyZW4gPz8gPENoZXZyb25SaWdodCAvPn1cbiAgPC9saT5cbilcbkJyZWFkY3J1bWJTZXBhcmF0b3IuZGlzcGxheU5hbWUgPSBcIkJyZWFkY3J1bWJTZXBhcmF0b3JcIlxuXG5jb25zdCBCcmVhZGNydW1iRWxsaXBzaXMgPSAoe1xuICBjbGFzc05hbWUsXG4gIC4uLnByb3BzXG59OiBSZWFjdC5Db21wb25lbnRQcm9wczxcInNwYW5cIj4pID0+IChcbiAgPHNwYW5cbiAgICByb2xlPVwicHJlc2VudGF0aW9uXCJcbiAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgIGNsYXNzTmFtZT17Y24oXCJmbGV4IGgtOSB3LTkgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCIsIGNsYXNzTmFtZSl9XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPE1vcmVIb3Jpem9udGFsIGNsYXNzTmFtZT1cImgtNCB3LTRcIiAvPlxuICAgIDxzcGFuIGNsYXNzTmFtZT1cInNyLW9ubHlcIj5Nb3JlPC9zcGFuPlxuICA8L3NwYW4+XG4pXG5CcmVhZGNydW1iRWxsaXBzaXMuZGlzcGxheU5hbWUgPSBcIkJyZWFkY3J1bWJFbGlwc3Npc1wiXG5cbmV4cG9ydCB7XG4gIEJyZWFkY3J1bWIsXG4gIEJyZWFkY3J1bWJMaXN0LFxuICBCcmVhZGNydW1iSXRlbSxcbiAgQnJlYWRjcnVtYkxpbmssXG4gIEJyZWFkY3J1bWJQYWdlLFxuICBCcmVhZGNydW1iU2VwYXJhdG9yLFxuICBCcmVhZGNydW1iRWxsaXBzaXMsXG59XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQUtBLEtBQUssTUFBTSxPQUFPO0FBQzlCLFNBQVNDLElBQUksUUFBUSxzQkFBc0I7QUFDM0MsU0FBU0MsWUFBWSxFQUFFQyxjQUFjLFFBQVEsY0FBYztBQUUzRCxTQUFTQyxFQUFFLFFBQVEsYUFBYTtBQUVoQyxNQUFNQyxVQUFVLGdCQUFHTCxLQUFLLENBQUNNLFVBQVUsQ0FLakMsQ0FBQztFQUFFLEdBQUdDO0FBQU0sQ0FBQyxFQUFFQyxHQUFHLGtCQUFLUixLQUFBLENBQUFTLGFBQUEsUUFBQUMsUUFBQTtFQUFLRixHQUFHLEVBQUVBLEdBQUk7RUFBQyxjQUFXO0FBQVksR0FBS0QsS0FBSyxDQUFHLENBQUMsQ0FBQztBQUM5RUYsVUFBVSxDQUFDTSxXQUFXLEdBQUcsWUFBWTtBQUVyQyxNQUFNQyxjQUFjLGdCQUFHWixLQUFLLENBQUNNLFVBQVUsQ0FHckMsQ0FBQztFQUFFTyxTQUFTO0VBQUUsR0FBR047QUFBTSxDQUFDLEVBQUVDLEdBQUcsa0JBQzdCUixLQUFBLENBQUFTLGFBQUEsT0FBQUMsUUFBQTtFQUNFRixHQUFHLEVBQUVBLEdBQUk7RUFDVEssU0FBUyxFQUFFVCxFQUFFLENBQ1gsMEZBQTBGLEVBQzFGUyxTQUNGO0FBQUUsR0FDRU4sS0FBSyxDQUNWLENBQ0YsQ0FBQztBQUNGSyxjQUFjLENBQUNELFdBQVcsR0FBRyxnQkFBZ0I7QUFFN0MsTUFBTUcsY0FBYyxnQkFBR2QsS0FBSyxDQUFDTSxVQUFVLENBR3JDLENBQUM7RUFBRU8sU0FBUztFQUFFLEdBQUdOO0FBQU0sQ0FBQyxFQUFFQyxHQUFHLGtCQUM3QlIsS0FBQSxDQUFBUyxhQUFBLE9BQUFDLFFBQUE7RUFDRUYsR0FBRyxFQUFFQSxHQUFJO0VBQ1RLLFNBQVMsRUFBRVQsRUFBRSxDQUFDLGtDQUFrQyxFQUFFUyxTQUFTO0FBQUUsR0FDekROLEtBQUssQ0FDVixDQUNGLENBQUM7QUFDRk8sY0FBYyxDQUFDSCxXQUFXLEdBQUcsZ0JBQWdCO0FBRTdDLE1BQU1JLGNBQWMsZ0JBQUdmLEtBQUssQ0FBQ00sVUFBVSxDQUtyQyxDQUFDO0VBQUVVLE9BQU87RUFBRUgsU0FBUztFQUFFLEdBQUdOO0FBQU0sQ0FBQyxFQUFFQyxHQUFHLEtBQUs7RUFDM0MsTUFBTVMsSUFBSSxHQUFHRCxPQUFPLEdBQUdmLElBQUksR0FBRyxHQUFHO0VBRWpDLG9CQUNFRCxLQUFBLENBQUFTLGFBQUEsQ0FBQ1EsSUFBSSxFQUFBUCxRQUFBO0lBQ0hGLEdBQUcsRUFBRUEsR0FBSTtJQUNUSyxTQUFTLEVBQUVULEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRVMsU0FBUztFQUFFLEdBQ2hFTixLQUFLLENBQ1YsQ0FBQztBQUVOLENBQUMsQ0FBQztBQUNGUSxjQUFjLENBQUNKLFdBQVcsR0FBRyxnQkFBZ0I7QUFFN0MsTUFBTU8sY0FBYyxnQkFBR2xCLEtBQUssQ0FBQ00sVUFBVSxDQUdyQyxDQUFDO0VBQUVPLFNBQVM7RUFBRSxHQUFHTjtBQUFNLENBQUMsRUFBRUMsR0FBRyxrQkFDN0JSLEtBQUEsQ0FBQVMsYUFBQSxTQUFBQyxRQUFBO0VBQ0VGLEdBQUcsRUFBRUEsR0FBSTtFQUNUVyxJQUFJLEVBQUMsTUFBTTtFQUNYLGlCQUFjLE1BQU07RUFDcEIsZ0JBQWEsTUFBTTtFQUNuQk4sU0FBUyxFQUFFVCxFQUFFLENBQUMsNkJBQTZCLEVBQUVTLFNBQVM7QUFBRSxHQUNwRE4sS0FBSyxDQUNWLENBQ0YsQ0FBQztBQUNGVyxjQUFjLENBQUNQLFdBQVcsR0FBRyxnQkFBZ0I7QUFFN0MsTUFBTVMsbUJBQW1CLEdBQUdBLENBQUM7RUFDM0JDLFFBQVE7RUFDUlIsU0FBUztFQUNULEdBQUdOO0FBQ3VCLENBQUMsa0JBQzNCUCxLQUFBLENBQUFTLGFBQUEsT0FBQUMsUUFBQTtFQUNFUyxJQUFJLEVBQUMsY0FBYztFQUNuQixlQUFZLE1BQU07RUFDbEJOLFNBQVMsRUFBRVQsRUFBRSxDQUFDLGtCQUFrQixFQUFFUyxTQUFTO0FBQUUsR0FDekNOLEtBQUssR0FFUmMsUUFBUSxpQkFBSXJCLEtBQUEsQ0FBQVMsYUFBQSxDQUFDUCxZQUFZLE1BQUUsQ0FDMUIsQ0FDTDtBQUNEa0IsbUJBQW1CLENBQUNULFdBQVcsR0FBRyxxQkFBcUI7QUFFdkQsTUFBTVcsa0JBQWtCLEdBQUdBLENBQUM7RUFDMUJULFNBQVM7RUFDVCxHQUFHTjtBQUN5QixDQUFDLGtCQUM3QlAsS0FBQSxDQUFBUyxhQUFBLFNBQUFDLFFBQUE7RUFDRVMsSUFBSSxFQUFDLGNBQWM7RUFDbkIsZUFBWSxNQUFNO0VBQ2xCTixTQUFTLEVBQUVULEVBQUUsQ0FBQywwQ0FBMEMsRUFBRVMsU0FBUztBQUFFLEdBQ2pFTixLQUFLLGdCQUVUUCxLQUFBLENBQUFTLGFBQUEsQ0FBQ04sY0FBYztFQUFDVSxTQUFTLEVBQUM7QUFBUyxDQUFFLENBQUMsZUFDdENiLEtBQUEsQ0FBQVMsYUFBQTtFQUFNSSxTQUFTLEVBQUM7QUFBUyxHQUFDLE1BQVUsQ0FDaEMsQ0FDUDtBQUNEUyxrQkFBa0IsQ0FBQ1gsV0FBVyxHQUFHLG9CQUFvQjtBQUVyRCxTQUNFTixVQUFVLEVBQ1ZPLGNBQWMsRUFDZEUsY0FBYyxFQUNkQyxjQUFjLEVBQ2RHLGNBQWMsRUFDZEUsbUJBQW1CLEVBQ25CRSxrQkFBa0IiLCJpZ25vcmVMaXN0IjpbXX0=