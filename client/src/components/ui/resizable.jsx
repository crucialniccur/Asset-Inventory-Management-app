function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import { GripVertical } from "lucide-react";
import * as ResizablePrimitive from "react-resizable-panels";
import { cn } from "@/lib/utils";
const ResizablePanelGroup = ({
  className,
  ...props
}) => /*#__PURE__*/React.createElement(ResizablePrimitive.PanelGroup, _extends({
  className: cn("flex h-full w-full data-[panel-group-direction=vertical]:flex-col", className)
}, props));
const ResizablePanel = ResizablePrimitive.Panel;
const ResizableHandle = ({
  withHandle,
  className,
  ...props
}) => /*#__PURE__*/React.createElement(ResizablePrimitive.PanelResizeHandle, _extends({
  className: cn("relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90", className)
}, props), withHandle && /*#__PURE__*/React.createElement("div", {
  className: "z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border"
}, /*#__PURE__*/React.createElement(GripVertical, {
  className: "h-2.5 w-2.5"
})));
export { ResizablePanelGroup, ResizablePanel, ResizableHandle };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHcmlwVmVydGljYWwiLCJSZXNpemFibGVQcmltaXRpdmUiLCJjbiIsIlJlc2l6YWJsZVBhbmVsR3JvdXAiLCJjbGFzc05hbWUiLCJwcm9wcyIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsIlBhbmVsR3JvdXAiLCJfZXh0ZW5kcyIsIlJlc2l6YWJsZVBhbmVsIiwiUGFuZWwiLCJSZXNpemFibGVIYW5kbGUiLCJ3aXRoSGFuZGxlIiwiUGFuZWxSZXNpemVIYW5kbGUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9yZXNpemFibGUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyaXBWZXJ0aWNhbCB9IGZyb20gXCJsdWNpZGUtcmVhY3RcIlxuaW1wb3J0ICogYXMgUmVzaXphYmxlUHJpbWl0aXZlIGZyb20gXCJyZWFjdC1yZXNpemFibGUtcGFuZWxzXCJcblxuaW1wb3J0IHsgY24gfSBmcm9tIFwiQC9saWIvdXRpbHNcIlxuXG5jb25zdCBSZXNpemFibGVQYW5lbEdyb3VwID0gKHtcbiAgY2xhc3NOYW1lLFxuICAuLi5wcm9wc1xufTogUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIFJlc2l6YWJsZVByaW1pdGl2ZS5QYW5lbEdyb3VwPikgPT4gKFxuICA8UmVzaXphYmxlUHJpbWl0aXZlLlBhbmVsR3JvdXBcbiAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgXCJmbGV4IGgtZnVsbCB3LWZ1bGwgZGF0YS1bcGFuZWwtZ3JvdXAtZGlyZWN0aW9uPXZlcnRpY2FsXTpmbGV4LWNvbFwiLFxuICAgICAgY2xhc3NOYW1lXG4gICAgKX1cbiAgICB7Li4ucHJvcHN9XG4gIC8+XG4pXG5cbmNvbnN0IFJlc2l6YWJsZVBhbmVsID0gUmVzaXphYmxlUHJpbWl0aXZlLlBhbmVsXG5cbmNvbnN0IFJlc2l6YWJsZUhhbmRsZSA9ICh7XG4gIHdpdGhIYW5kbGUsXG4gIGNsYXNzTmFtZSxcbiAgLi4ucHJvcHNcbn06IFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBSZXNpemFibGVQcmltaXRpdmUuUGFuZWxSZXNpemVIYW5kbGU+ICYge1xuICB3aXRoSGFuZGxlPzogYm9vbGVhblxufSkgPT4gKFxuICA8UmVzaXphYmxlUHJpbWl0aXZlLlBhbmVsUmVzaXplSGFuZGxlXG4gICAgY2xhc3NOYW1lPXtjbihcbiAgICAgIFwicmVsYXRpdmUgZmxleCB3LXB4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBiZy1ib3JkZXIgYWZ0ZXI6YWJzb2x1dGUgYWZ0ZXI6aW5zZXQteS0wIGFmdGVyOmxlZnQtMS8yIGFmdGVyOnctMSBhZnRlcjotdHJhbnNsYXRlLXgtMS8yIGZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZy0xIGZvY3VzLXZpc2libGU6cmluZy1yaW5nIGZvY3VzLXZpc2libGU6cmluZy1vZmZzZXQtMSBkYXRhLVtwYW5lbC1ncm91cC1kaXJlY3Rpb249dmVydGljYWxdOmgtcHggZGF0YS1bcGFuZWwtZ3JvdXAtZGlyZWN0aW9uPXZlcnRpY2FsXTp3LWZ1bGwgZGF0YS1bcGFuZWwtZ3JvdXAtZGlyZWN0aW9uPXZlcnRpY2FsXTphZnRlcjpsZWZ0LTAgZGF0YS1bcGFuZWwtZ3JvdXAtZGlyZWN0aW9uPXZlcnRpY2FsXTphZnRlcjpoLTEgZGF0YS1bcGFuZWwtZ3JvdXAtZGlyZWN0aW9uPXZlcnRpY2FsXTphZnRlcjp3LWZ1bGwgZGF0YS1bcGFuZWwtZ3JvdXAtZGlyZWN0aW9uPXZlcnRpY2FsXTphZnRlcjotdHJhbnNsYXRlLXktMS8yIGRhdGEtW3BhbmVsLWdyb3VwLWRpcmVjdGlvbj12ZXJ0aWNhbF06YWZ0ZXI6dHJhbnNsYXRlLXgtMCBbJltkYXRhLXBhbmVsLWdyb3VwLWRpcmVjdGlvbj12ZXJ0aWNhbF0+ZGl2XTpyb3RhdGUtOTBcIixcbiAgICAgIGNsYXNzTmFtZVxuICAgICl9XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAge3dpdGhIYW5kbGUgJiYgKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ6LTEwIGZsZXggaC00IHctMyBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgcm91bmRlZC1zbSBib3JkZXIgYmctYm9yZGVyXCI+XG4gICAgICAgIDxHcmlwVmVydGljYWwgY2xhc3NOYW1lPVwiaC0yLjUgdy0yLjVcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgKX1cbiAgPC9SZXNpemFibGVQcmltaXRpdmUuUGFuZWxSZXNpemVIYW5kbGU+XG4pXG5cbmV4cG9ydCB7IFJlc2l6YWJsZVBhbmVsR3JvdXAsIFJlc2l6YWJsZVBhbmVsLCBSZXNpemFibGVIYW5kbGUgfVxuIl0sIm1hcHBpbmdzIjoiO0FBQUEsU0FBU0EsWUFBWSxRQUFRLGNBQWM7QUFDM0MsT0FBTyxLQUFLQyxrQkFBa0IsTUFBTSx3QkFBd0I7QUFFNUQsU0FBU0MsRUFBRSxRQUFRLGFBQWE7QUFFaEMsTUFBTUMsbUJBQW1CLEdBQUdBLENBQUM7RUFDM0JDLFNBQVM7RUFDVCxHQUFHQztBQUN1RCxDQUFDLGtCQUMzREMsS0FBQSxDQUFBQyxhQUFBLENBQUNOLGtCQUFrQixDQUFDTyxVQUFVLEVBQUFDLFFBQUE7RUFDNUJMLFNBQVMsRUFBRUYsRUFBRSxDQUNYLG1FQUFtRSxFQUNuRUUsU0FDRjtBQUFFLEdBQ0VDLEtBQUssQ0FDVixDQUNGO0FBRUQsTUFBTUssY0FBYyxHQUFHVCxrQkFBa0IsQ0FBQ1UsS0FBSztBQUUvQyxNQUFNQyxlQUFlLEdBQUdBLENBQUM7RUFDdkJDLFVBQVU7RUFDVlQsU0FBUztFQUNULEdBQUdDO0FBR0wsQ0FBQyxrQkFDQ0MsS0FBQSxDQUFBQyxhQUFBLENBQUNOLGtCQUFrQixDQUFDYSxpQkFBaUIsRUFBQUwsUUFBQTtFQUNuQ0wsU0FBUyxFQUFFRixFQUFFLENBQ1gseW9CQUF5b0IsRUFDem9CRSxTQUNGO0FBQUUsR0FDRUMsS0FBSyxHQUVSUSxVQUFVLGlCQUNUUCxLQUFBLENBQUFDLGFBQUE7RUFBS0gsU0FBUyxFQUFDO0FBQTJFLGdCQUN4RkUsS0FBQSxDQUFBQyxhQUFBLENBQUNQLFlBQVk7RUFBQ0ksU0FBUyxFQUFDO0FBQWEsQ0FBRSxDQUNwQyxDQUU2QixDQUN2QztBQUVELFNBQVNELG1CQUFtQixFQUFFTyxjQUFjLEVBQUVFLGVBQWUiLCJpZ25vcmVMaXN0IjpbXX0=