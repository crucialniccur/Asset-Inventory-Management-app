function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import * as React from "react";
import * as RechartsPrimitive from "recharts";
import { cn } from "@/lib/utils";

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = {
  light: "",
  dark: ".dark"
};
const ChartContext = /*#__PURE__*/React.createContext(null);
function useChart() {
  const context = React.useContext(ChartContext);
  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }
  return context;
}
const ChartContainer = /*#__PURE__*/React.forwardRef(({
  id,
  className,
  children,
  config,
  ...props
}, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;
  return /*#__PURE__*/React.createElement(ChartContext.Provider, {
    value: {
      config
    }
  }, /*#__PURE__*/React.createElement("div", _extends({
    "data-chart": chartId,
    ref: ref,
    className: cn("flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none", className)
  }, props), /*#__PURE__*/React.createElement(ChartStyle, {
    id: chartId,
    config: config
  }), /*#__PURE__*/React.createElement(RechartsPrimitive.ResponsiveContainer, null, children)));
});
ChartContainer.displayName = "Chart";
const ChartStyle = ({
  id,
  config
}) => {
  const colorConfig = Object.entries(config).filter(([_, config]) => config.theme || config.color);
  if (!colorConfig.length) {
    return null;
  }
  return /*#__PURE__*/React.createElement("style", {
    dangerouslySetInnerHTML: {
      __html: Object.entries(THEMES).map(([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig.map(([key, itemConfig]) => {
        const color = itemConfig.theme?.[theme] || itemConfig.color;
        return color ? `  --color-${key}: ${color};` : null;
      }).join("\n")}
}
`).join("\n")
    }
  });
};
const ChartTooltip = RechartsPrimitive.Tooltip;
const ChartTooltipContent = /*#__PURE__*/React.forwardRef(({
  active,
  payload,
  className,
  indicator = "dot",
  hideLabel = false,
  hideIndicator = false,
  label,
  labelFormatter,
  labelClassName,
  formatter,
  color,
  nameKey,
  labelKey
}, ref) => {
  const {
    config
  } = useChart();
  const tooltipLabel = React.useMemo(() => {
    if (hideLabel || !payload?.length) {
      return null;
    }
    const [item] = payload;
    const key = `${labelKey || item.dataKey || item.name || "value"}`;
    const itemConfig = getPayloadConfigFromPayload(config, item, key);
    const value = !labelKey && typeof label === "string" ? config[label]?.label || label : itemConfig?.label;
    if (labelFormatter) {
      return /*#__PURE__*/React.createElement("div", {
        className: cn("font-medium", labelClassName)
      }, labelFormatter(value, payload));
    }
    if (!value) {
      return null;
    }
    return /*#__PURE__*/React.createElement("div", {
      className: cn("font-medium", labelClassName)
    }, value);
  }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);
  if (!active || !payload?.length) {
    return null;
  }
  const nestLabel = payload.length === 1 && indicator !== "dot";
  return /*#__PURE__*/React.createElement("div", {
    ref: ref,
    className: cn("grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl", className)
  }, !nestLabel ? tooltipLabel : null, /*#__PURE__*/React.createElement("div", {
    className: "grid gap-1.5"
  }, payload.map((item, index) => {
    const key = `${nameKey || item.name || item.dataKey || "value"}`;
    const itemConfig = getPayloadConfigFromPayload(config, item, key);
    const indicatorColor = color || item.payload.fill || item.color;
    return /*#__PURE__*/React.createElement("div", {
      key: item.dataKey,
      className: cn("flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground", indicator === "dot" && "items-center")
    }, formatter && item?.value !== undefined && item.name ? formatter(item.value, item.name, item, index, item.payload) : /*#__PURE__*/React.createElement(React.Fragment, null, itemConfig?.icon ? /*#__PURE__*/React.createElement(itemConfig.icon, null) : !hideIndicator && /*#__PURE__*/React.createElement("div", {
      className: cn("shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]", {
        "h-2.5 w-2.5": indicator === "dot",
        "w-1": indicator === "line",
        "w-0 border-[1.5px] border-dashed bg-transparent": indicator === "dashed",
        "my-0.5": nestLabel && indicator === "dashed"
      }),
      style: {
        "--color-bg": indicatorColor,
        "--color-border": indicatorColor
      }
    }), /*#__PURE__*/React.createElement("div", {
      className: cn("flex flex-1 justify-between leading-none", nestLabel ? "items-end" : "items-center")
    }, /*#__PURE__*/React.createElement("div", {
      className: "grid gap-1.5"
    }, nestLabel ? tooltipLabel : null, /*#__PURE__*/React.createElement("span", {
      className: "text-muted-foreground"
    }, itemConfig?.label || item.name)), item.value && /*#__PURE__*/React.createElement("span", {
      className: "font-mono font-medium tabular-nums text-foreground"
    }, item.value.toLocaleString()))));
  })));
});
ChartTooltipContent.displayName = "ChartTooltip";
const ChartLegend = RechartsPrimitive.Legend;
const ChartLegendContent = /*#__PURE__*/React.forwardRef(({
  className,
  hideIcon = false,
  payload,
  verticalAlign = "bottom",
  nameKey
}, ref) => {
  const {
    config
  } = useChart();
  if (!payload?.length) {
    return null;
  }
  return /*#__PURE__*/React.createElement("div", {
    ref: ref,
    className: cn("flex items-center justify-center gap-4", verticalAlign === "top" ? "pb-3" : "pt-3", className)
  }, payload.map(item => {
    const key = `${nameKey || item.dataKey || "value"}`;
    const itemConfig = getPayloadConfigFromPayload(config, item, key);
    return /*#__PURE__*/React.createElement("div", {
      key: item.value,
      className: cn("flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground")
    }, itemConfig?.icon && !hideIcon ? /*#__PURE__*/React.createElement(itemConfig.icon, null) : /*#__PURE__*/React.createElement("div", {
      className: "h-2 w-2 shrink-0 rounded-[2px]",
      style: {
        backgroundColor: item.color
      }
    }), itemConfig?.label);
  }));
});
ChartLegendContent.displayName = "ChartLegend";

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(config, payload, key) {
  if (typeof payload !== "object" || payload === null) {
    return undefined;
  }
  const payloadPayload = "payload" in payload && typeof payload.payload === "object" && payload.payload !== null ? payload.payload : undefined;
  let configLabelKey = key;
  if (key in payload && typeof payload[key] === "string") {
    configLabelKey = payload[key];
  } else if (payloadPayload && key in payloadPayload && typeof payloadPayload[key] === "string") {
    configLabelKey = payloadPayload[key];
  }
  return configLabelKey in config ? config[configLabelKey] : config[key];
}
export { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIlJlY2hhcnRzUHJpbWl0aXZlIiwiY24iLCJUSEVNRVMiLCJsaWdodCIsImRhcmsiLCJDaGFydENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidXNlQ2hhcnQiLCJjb250ZXh0IiwidXNlQ29udGV4dCIsIkVycm9yIiwiQ2hhcnRDb250YWluZXIiLCJmb3J3YXJkUmVmIiwiaWQiLCJjbGFzc05hbWUiLCJjaGlsZHJlbiIsImNvbmZpZyIsInByb3BzIiwicmVmIiwidW5pcXVlSWQiLCJ1c2VJZCIsImNoYXJ0SWQiLCJyZXBsYWNlIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwidmFsdWUiLCJfZXh0ZW5kcyIsIkNoYXJ0U3R5bGUiLCJSZXNwb25zaXZlQ29udGFpbmVyIiwiZGlzcGxheU5hbWUiLCJjb2xvckNvbmZpZyIsIk9iamVjdCIsImVudHJpZXMiLCJmaWx0ZXIiLCJfIiwidGhlbWUiLCJjb2xvciIsImxlbmd0aCIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwibWFwIiwicHJlZml4Iiwia2V5IiwiaXRlbUNvbmZpZyIsImpvaW4iLCJDaGFydFRvb2x0aXAiLCJUb29sdGlwIiwiQ2hhcnRUb29sdGlwQ29udGVudCIsImFjdGl2ZSIsInBheWxvYWQiLCJpbmRpY2F0b3IiLCJoaWRlTGFiZWwiLCJoaWRlSW5kaWNhdG9yIiwibGFiZWwiLCJsYWJlbEZvcm1hdHRlciIsImxhYmVsQ2xhc3NOYW1lIiwiZm9ybWF0dGVyIiwibmFtZUtleSIsImxhYmVsS2V5IiwidG9vbHRpcExhYmVsIiwidXNlTWVtbyIsIml0ZW0iLCJkYXRhS2V5IiwibmFtZSIsImdldFBheWxvYWRDb25maWdGcm9tUGF5bG9hZCIsIm5lc3RMYWJlbCIsImluZGV4IiwiaW5kaWNhdG9yQ29sb3IiLCJmaWxsIiwidW5kZWZpbmVkIiwiRnJhZ21lbnQiLCJpY29uIiwic3R5bGUiLCJ0b0xvY2FsZVN0cmluZyIsIkNoYXJ0TGVnZW5kIiwiTGVnZW5kIiwiQ2hhcnRMZWdlbmRDb250ZW50IiwiaGlkZUljb24iLCJ2ZXJ0aWNhbEFsaWduIiwiYmFja2dyb3VuZENvbG9yIiwicGF5bG9hZFBheWxvYWQiLCJjb25maWdMYWJlbEtleSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL2NoYXJ0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0ICogYXMgUmVjaGFydHNQcmltaXRpdmUgZnJvbSBcInJlY2hhcnRzXCJcblxuaW1wb3J0IHsgY24gfSBmcm9tIFwiQC9saWIvdXRpbHNcIlxuXG4vLyBGb3JtYXQ6IHsgVEhFTUVfTkFNRTogQ1NTX1NFTEVDVE9SIH1cbmNvbnN0IFRIRU1FUyA9IHsgbGlnaHQ6IFwiXCIsIGRhcms6IFwiLmRhcmtcIiB9IGFzIGNvbnN0XG5cbmV4cG9ydCB0eXBlIENoYXJ0Q29uZmlnID0ge1xuICBbayBpbiBzdHJpbmddOiB7XG4gICAgbGFiZWw/OiBSZWFjdC5SZWFjdE5vZGVcbiAgICBpY29uPzogUmVhY3QuQ29tcG9uZW50VHlwZVxuICB9ICYgKFxuICAgIHwgeyBjb2xvcj86IHN0cmluZzsgdGhlbWU/OiBuZXZlciB9XG4gICAgfCB7IGNvbG9yPzogbmV2ZXI7IHRoZW1lOiBSZWNvcmQ8a2V5b2YgdHlwZW9mIFRIRU1FUywgc3RyaW5nPiB9XG4gIClcbn1cblxudHlwZSBDaGFydENvbnRleHRQcm9wcyA9IHtcbiAgY29uZmlnOiBDaGFydENvbmZpZ1xufVxuXG5jb25zdCBDaGFydENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PENoYXJ0Q29udGV4dFByb3BzIHwgbnVsbD4obnVsbClcblxuZnVuY3Rpb24gdXNlQ2hhcnQoKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENoYXJ0Q29udGV4dClcblxuICBpZiAoIWNvbnRleHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1c2VDaGFydCBtdXN0IGJlIHVzZWQgd2l0aGluIGEgPENoYXJ0Q29udGFpbmVyIC8+XCIpXG4gIH1cblxuICByZXR1cm4gY29udGV4dFxufVxuXG5jb25zdCBDaGFydENvbnRhaW5lciA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIEhUTUxEaXZFbGVtZW50LFxuICBSZWFjdC5Db21wb25lbnRQcm9wczxcImRpdlwiPiAmIHtcbiAgICBjb25maWc6IENoYXJ0Q29uZmlnXG4gICAgY2hpbGRyZW46IFJlYWN0LkNvbXBvbmVudFByb3BzPFxuICAgICAgdHlwZW9mIFJlY2hhcnRzUHJpbWl0aXZlLlJlc3BvbnNpdmVDb250YWluZXJcbiAgICA+W1wiY2hpbGRyZW5cIl1cbiAgfVxuPigoeyBpZCwgY2xhc3NOYW1lLCBjaGlsZHJlbiwgY29uZmlnLCAuLi5wcm9wcyB9LCByZWYpID0+IHtcbiAgY29uc3QgdW5pcXVlSWQgPSBSZWFjdC51c2VJZCgpXG4gIGNvbnN0IGNoYXJ0SWQgPSBgY2hhcnQtJHtpZCB8fCB1bmlxdWVJZC5yZXBsYWNlKC86L2csIFwiXCIpfWBcblxuICByZXR1cm4gKFxuICAgIDxDaGFydENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgY29uZmlnIH19PlxuICAgICAgPGRpdlxuICAgICAgICBkYXRhLWNoYXJ0PXtjaGFydElkfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgICBcImZsZXggYXNwZWN0LXZpZGVvIGp1c3RpZnktY2VudGVyIHRleHQteHMgWyZfLnJlY2hhcnRzLWNhcnRlc2lhbi1heGlzLXRpY2tfdGV4dF06ZmlsbC1tdXRlZC1mb3JlZ3JvdW5kIFsmXy5yZWNoYXJ0cy1jYXJ0ZXNpYW4tZ3JpZF9saW5lW3N0cm9rZT0nI2NjYyddXTpzdHJva2UtYm9yZGVyLzUwIFsmXy5yZWNoYXJ0cy1jdXJ2ZS5yZWNoYXJ0cy10b29sdGlwLWN1cnNvcl06c3Ryb2tlLWJvcmRlciBbJl8ucmVjaGFydHMtZG90W3N0cm9rZT0nI2ZmZiddXTpzdHJva2UtdHJhbnNwYXJlbnQgWyZfLnJlY2hhcnRzLWxheWVyXTpvdXRsaW5lLW5vbmUgWyZfLnJlY2hhcnRzLXBvbGFyLWdyaWRfW3N0cm9rZT0nI2NjYyddXTpzdHJva2UtYm9yZGVyIFsmXy5yZWNoYXJ0cy1yYWRpYWwtYmFyLWJhY2tncm91bmQtc2VjdG9yXTpmaWxsLW11dGVkIFsmXy5yZWNoYXJ0cy1yZWN0YW5nbGUucmVjaGFydHMtdG9vbHRpcC1jdXJzb3JdOmZpbGwtbXV0ZWQgWyZfLnJlY2hhcnRzLXJlZmVyZW5jZS1saW5lX1tzdHJva2U9JyNjY2MnXV06c3Ryb2tlLWJvcmRlciBbJl8ucmVjaGFydHMtc2VjdG9yW3N0cm9rZT0nI2ZmZiddXTpzdHJva2UtdHJhbnNwYXJlbnQgWyZfLnJlY2hhcnRzLXNlY3Rvcl06b3V0bGluZS1ub25lIFsmXy5yZWNoYXJ0cy1zdXJmYWNlXTpvdXRsaW5lLW5vbmVcIixcbiAgICAgICAgICBjbGFzc05hbWVcbiAgICAgICAgKX1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgPlxuICAgICAgICA8Q2hhcnRTdHlsZSBpZD17Y2hhcnRJZH0gY29uZmlnPXtjb25maWd9IC8+XG4gICAgICAgIDxSZWNoYXJ0c1ByaW1pdGl2ZS5SZXNwb25zaXZlQ29udGFpbmVyPlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9SZWNoYXJ0c1ByaW1pdGl2ZS5SZXNwb25zaXZlQ29udGFpbmVyPlxuICAgICAgPC9kaXY+XG4gICAgPC9DaGFydENvbnRleHQuUHJvdmlkZXI+XG4gIClcbn0pXG5DaGFydENvbnRhaW5lci5kaXNwbGF5TmFtZSA9IFwiQ2hhcnRcIlxuXG5jb25zdCBDaGFydFN0eWxlID0gKHsgaWQsIGNvbmZpZyB9OiB7IGlkOiBzdHJpbmc7IGNvbmZpZzogQ2hhcnRDb25maWcgfSkgPT4ge1xuICBjb25zdCBjb2xvckNvbmZpZyA9IE9iamVjdC5lbnRyaWVzKGNvbmZpZykuZmlsdGVyKFxuICAgIChbXywgY29uZmlnXSkgPT4gY29uZmlnLnRoZW1lIHx8IGNvbmZpZy5jb2xvclxuICApXG5cbiAgaWYgKCFjb2xvckNvbmZpZy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c3R5bGVcbiAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgIF9faHRtbDogT2JqZWN0LmVudHJpZXMoVEhFTUVTKVxuICAgICAgICAgIC5tYXAoXG4gICAgICAgICAgICAoW3RoZW1lLCBwcmVmaXhdKSA9PiBgXG4ke3ByZWZpeH0gW2RhdGEtY2hhcnQ9JHtpZH1dIHtcbiR7Y29sb3JDb25maWdcbiAgLm1hcCgoW2tleSwgaXRlbUNvbmZpZ10pID0+IHtcbiAgICBjb25zdCBjb2xvciA9XG4gICAgICBpdGVtQ29uZmlnLnRoZW1lPy5bdGhlbWUgYXMga2V5b2YgdHlwZW9mIGl0ZW1Db25maWcudGhlbWVdIHx8XG4gICAgICBpdGVtQ29uZmlnLmNvbG9yXG4gICAgcmV0dXJuIGNvbG9yID8gYCAgLS1jb2xvci0ke2tleX06ICR7Y29sb3J9O2AgOiBudWxsXG4gIH0pXG4gIC5qb2luKFwiXFxuXCIpfVxufVxuYFxuICAgICAgICAgIClcbiAgICAgICAgICAuam9pbihcIlxcblwiKSxcbiAgICAgIH19XG4gICAgLz5cbiAgKVxufVxuXG5jb25zdCBDaGFydFRvb2x0aXAgPSBSZWNoYXJ0c1ByaW1pdGl2ZS5Ub29sdGlwXG5cbmNvbnN0IENoYXJ0VG9vbHRpcENvbnRlbnQgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBIVE1MRGl2RWxlbWVudCxcbiAgUmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIFJlY2hhcnRzUHJpbWl0aXZlLlRvb2x0aXA+ICZcbiAgICBSZWFjdC5Db21wb25lbnRQcm9wczxcImRpdlwiPiAmIHtcbiAgICAgIGhpZGVMYWJlbD86IGJvb2xlYW5cbiAgICAgIGhpZGVJbmRpY2F0b3I/OiBib29sZWFuXG4gICAgICBpbmRpY2F0b3I/OiBcImxpbmVcIiB8IFwiZG90XCIgfCBcImRhc2hlZFwiXG4gICAgICBuYW1lS2V5Pzogc3RyaW5nXG4gICAgICBsYWJlbEtleT86IHN0cmluZ1xuICAgIH1cbj4oXG4gIChcbiAgICB7XG4gICAgICBhY3RpdmUsXG4gICAgICBwYXlsb2FkLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgaW5kaWNhdG9yID0gXCJkb3RcIixcbiAgICAgIGhpZGVMYWJlbCA9IGZhbHNlLFxuICAgICAgaGlkZUluZGljYXRvciA9IGZhbHNlLFxuICAgICAgbGFiZWwsXG4gICAgICBsYWJlbEZvcm1hdHRlcixcbiAgICAgIGxhYmVsQ2xhc3NOYW1lLFxuICAgICAgZm9ybWF0dGVyLFxuICAgICAgY29sb3IsXG4gICAgICBuYW1lS2V5LFxuICAgICAgbGFiZWxLZXksXG4gICAgfSxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgY29uc3QgeyBjb25maWcgfSA9IHVzZUNoYXJ0KClcblxuICAgIGNvbnN0IHRvb2x0aXBMYWJlbCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgaWYgKGhpZGVMYWJlbCB8fCAhcGF5bG9hZD8ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtpdGVtXSA9IHBheWxvYWRcbiAgICAgIGNvbnN0IGtleSA9IGAke2xhYmVsS2V5IHx8IGl0ZW0uZGF0YUtleSB8fCBpdGVtLm5hbWUgfHwgXCJ2YWx1ZVwifWBcbiAgICAgIGNvbnN0IGl0ZW1Db25maWcgPSBnZXRQYXlsb2FkQ29uZmlnRnJvbVBheWxvYWQoY29uZmlnLCBpdGVtLCBrZXkpXG4gICAgICBjb25zdCB2YWx1ZSA9XG4gICAgICAgICFsYWJlbEtleSAmJiB0eXBlb2YgbGFiZWwgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICA/IGNvbmZpZ1tsYWJlbCBhcyBrZXlvZiB0eXBlb2YgY29uZmlnXT8ubGFiZWwgfHwgbGFiZWxcbiAgICAgICAgICA6IGl0ZW1Db25maWc/LmxhYmVsXG5cbiAgICAgIGlmIChsYWJlbEZvcm1hdHRlcikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbihcImZvbnQtbWVkaXVtXCIsIGxhYmVsQ2xhc3NOYW1lKX0+XG4gICAgICAgICAgICB7bGFiZWxGb3JtYXR0ZXIodmFsdWUsIHBheWxvYWQpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbihcImZvbnQtbWVkaXVtXCIsIGxhYmVsQ2xhc3NOYW1lKX0+e3ZhbHVlfTwvZGl2PlxuICAgIH0sIFtcbiAgICAgIGxhYmVsLFxuICAgICAgbGFiZWxGb3JtYXR0ZXIsXG4gICAgICBwYXlsb2FkLFxuICAgICAgaGlkZUxhYmVsLFxuICAgICAgbGFiZWxDbGFzc05hbWUsXG4gICAgICBjb25maWcsXG4gICAgICBsYWJlbEtleSxcbiAgICBdKVxuXG4gICAgaWYgKCFhY3RpdmUgfHwgIXBheWxvYWQ/Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBuZXN0TGFiZWwgPSBwYXlsb2FkLmxlbmd0aCA9PT0gMSAmJiBpbmRpY2F0b3IgIT09IFwiZG90XCJcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICAgIFwiZ3JpZCBtaW4tdy1bOHJlbV0gaXRlbXMtc3RhcnQgZ2FwLTEuNSByb3VuZGVkLWxnIGJvcmRlciBib3JkZXItYm9yZGVyLzUwIGJnLWJhY2tncm91bmQgcHgtMi41IHB5LTEuNSB0ZXh0LXhzIHNoYWRvdy14bFwiLFxuICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICB7IW5lc3RMYWJlbCA/IHRvb2x0aXBMYWJlbCA6IG51bGx9XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBnYXAtMS41XCI+XG4gICAgICAgICAge3BheWxvYWQubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gYCR7bmFtZUtleSB8fCBpdGVtLm5hbWUgfHwgaXRlbS5kYXRhS2V5IHx8IFwidmFsdWVcIn1gXG4gICAgICAgICAgICBjb25zdCBpdGVtQ29uZmlnID0gZ2V0UGF5bG9hZENvbmZpZ0Zyb21QYXlsb2FkKGNvbmZpZywgaXRlbSwga2V5KVxuICAgICAgICAgICAgY29uc3QgaW5kaWNhdG9yQ29sb3IgPSBjb2xvciB8fCBpdGVtLnBheWxvYWQuZmlsbCB8fCBpdGVtLmNvbG9yXG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBrZXk9e2l0ZW0uZGF0YUtleX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICAgICAgICAgICAgXCJmbGV4IHctZnVsbCBmbGV4LXdyYXAgaXRlbXMtc3RyZXRjaCBnYXAtMiBbJj5zdmddOmgtMi41IFsmPnN2Z106dy0yLjUgWyY+c3ZnXTp0ZXh0LW11dGVkLWZvcmVncm91bmRcIixcbiAgICAgICAgICAgICAgICAgIGluZGljYXRvciA9PT0gXCJkb3RcIiAmJiBcIml0ZW1zLWNlbnRlclwiXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtmb3JtYXR0ZXIgJiYgaXRlbT8udmFsdWUgIT09IHVuZGVmaW5lZCAmJiBpdGVtLm5hbWUgPyAoXG4gICAgICAgICAgICAgICAgICBmb3JtYXR0ZXIoaXRlbS52YWx1ZSwgaXRlbS5uYW1lLCBpdGVtLCBpbmRleCwgaXRlbS5wYXlsb2FkKVxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICB7aXRlbUNvbmZpZz8uaWNvbiA/IChcbiAgICAgICAgICAgICAgICAgICAgICA8aXRlbUNvbmZpZy5pY29uIC8+XG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgIWhpZGVJbmRpY2F0b3IgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2hyaW5rLTAgcm91bmRlZC1bMnB4XSBib3JkZXItWy0tY29sb3ItYm9yZGVyXSBiZy1bLS1jb2xvci1iZ11cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImgtMi41IHctMi41XCI6IGluZGljYXRvciA9PT0gXCJkb3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidy0xXCI6IGluZGljYXRvciA9PT0gXCJsaW5lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInctMCBib3JkZXItWzEuNXB4XSBib3JkZXItZGFzaGVkIGJnLXRyYW5zcGFyZW50XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGljYXRvciA9PT0gXCJkYXNoZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibXktMC41XCI6IG5lc3RMYWJlbCAmJiBpbmRpY2F0b3IgPT09IFwiZGFzaGVkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCItLWNvbG9yLWJnXCI6IGluZGljYXRvckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCItLWNvbG9yLWJvcmRlclwiOiBpbmRpY2F0b3JDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGFzIFJlYWN0LkNTU1Byb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmbGV4IGZsZXgtMSBqdXN0aWZ5LWJldHdlZW4gbGVhZGluZy1ub25lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXN0TGFiZWwgPyBcIml0ZW1zLWVuZFwiIDogXCJpdGVtcy1jZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ2FwLTEuNVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge25lc3RMYWJlbCA/IHRvb2x0aXBMYWJlbCA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LW11dGVkLWZvcmVncm91bmRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAge2l0ZW1Db25maWc/LmxhYmVsIHx8IGl0ZW0ubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICB7aXRlbS52YWx1ZSAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmb250LW1vbm8gZm9udC1tZWRpdW0gdGFidWxhci1udW1zIHRleHQtZm9yZWdyb3VuZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICB7aXRlbS52YWx1ZS50b0xvY2FsZVN0cmluZygpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApXG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG4pXG5DaGFydFRvb2x0aXBDb250ZW50LmRpc3BsYXlOYW1lID0gXCJDaGFydFRvb2x0aXBcIlxuXG5jb25zdCBDaGFydExlZ2VuZCA9IFJlY2hhcnRzUHJpbWl0aXZlLkxlZ2VuZFxuXG5jb25zdCBDaGFydExlZ2VuZENvbnRlbnQgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBIVE1MRGl2RWxlbWVudCxcbiAgUmVhY3QuQ29tcG9uZW50UHJvcHM8XCJkaXZcIj4gJlxuICAgIFBpY2s8UmVjaGFydHNQcmltaXRpdmUuTGVnZW5kUHJvcHMsIFwicGF5bG9hZFwiIHwgXCJ2ZXJ0aWNhbEFsaWduXCI+ICYge1xuICAgICAgaGlkZUljb24/OiBib29sZWFuXG4gICAgICBuYW1lS2V5Pzogc3RyaW5nXG4gICAgfVxuPihcbiAgKFxuICAgIHsgY2xhc3NOYW1lLCBoaWRlSWNvbiA9IGZhbHNlLCBwYXlsb2FkLCB2ZXJ0aWNhbEFsaWduID0gXCJib3R0b21cIiwgbmFtZUtleSB9LFxuICAgIHJlZlxuICApID0+IHtcbiAgICBjb25zdCB7IGNvbmZpZyB9ID0gdXNlQ2hhcnQoKVxuXG4gICAgaWYgKCFwYXlsb2FkPy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICAgICAgXCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBnYXAtNFwiLFxuICAgICAgICAgIHZlcnRpY2FsQWxpZ24gPT09IFwidG9wXCIgPyBcInBiLTNcIiA6IFwicHQtM1wiLFxuICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICB7cGF5bG9hZC5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBgJHtuYW1lS2V5IHx8IGl0ZW0uZGF0YUtleSB8fCBcInZhbHVlXCJ9YFxuICAgICAgICAgIGNvbnN0IGl0ZW1Db25maWcgPSBnZXRQYXlsb2FkQ29uZmlnRnJvbVBheWxvYWQoY29uZmlnLCBpdGVtLCBrZXkpXG5cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2l0ZW0udmFsdWV9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICAgICAgICAgICAgXCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMS41IFsmPnN2Z106aC0zIFsmPnN2Z106dy0zIFsmPnN2Z106dGV4dC1tdXRlZC1mb3JlZ3JvdW5kXCJcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2l0ZW1Db25maWc/Lmljb24gJiYgIWhpZGVJY29uID8gKFxuICAgICAgICAgICAgICAgIDxpdGVtQ29uZmlnLmljb24gLz5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJoLTIgdy0yIHNocmluay0wIHJvdW5kZWQtWzJweF1cIlxuICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBpdGVtLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICB7aXRlbUNvbmZpZz8ubGFiZWx9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApXG4gICAgICAgIH0pfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG4pXG5DaGFydExlZ2VuZENvbnRlbnQuZGlzcGxheU5hbWUgPSBcIkNoYXJ0TGVnZW5kXCJcblxuLy8gSGVscGVyIHRvIGV4dHJhY3QgaXRlbSBjb25maWcgZnJvbSBhIHBheWxvYWQuXG5mdW5jdGlvbiBnZXRQYXlsb2FkQ29uZmlnRnJvbVBheWxvYWQoXG4gIGNvbmZpZzogQ2hhcnRDb25maWcsXG4gIHBheWxvYWQ6IHVua25vd24sXG4gIGtleTogc3RyaW5nXG4pIHtcbiAgaWYgKHR5cGVvZiBwYXlsb2FkICE9PSBcIm9iamVjdFwiIHx8IHBheWxvYWQgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBjb25zdCBwYXlsb2FkUGF5bG9hZCA9XG4gICAgXCJwYXlsb2FkXCIgaW4gcGF5bG9hZCAmJlxuICAgIHR5cGVvZiBwYXlsb2FkLnBheWxvYWQgPT09IFwib2JqZWN0XCIgJiZcbiAgICBwYXlsb2FkLnBheWxvYWQgIT09IG51bGxcbiAgICAgID8gcGF5bG9hZC5wYXlsb2FkXG4gICAgICA6IHVuZGVmaW5lZFxuXG4gIGxldCBjb25maWdMYWJlbEtleTogc3RyaW5nID0ga2V5XG5cbiAgaWYgKFxuICAgIGtleSBpbiBwYXlsb2FkICYmXG4gICAgdHlwZW9mIHBheWxvYWRba2V5IGFzIGtleW9mIHR5cGVvZiBwYXlsb2FkXSA9PT0gXCJzdHJpbmdcIlxuICApIHtcbiAgICBjb25maWdMYWJlbEtleSA9IHBheWxvYWRba2V5IGFzIGtleW9mIHR5cGVvZiBwYXlsb2FkXSBhcyBzdHJpbmdcbiAgfSBlbHNlIGlmIChcbiAgICBwYXlsb2FkUGF5bG9hZCAmJlxuICAgIGtleSBpbiBwYXlsb2FkUGF5bG9hZCAmJlxuICAgIHR5cGVvZiBwYXlsb2FkUGF5bG9hZFtrZXkgYXMga2V5b2YgdHlwZW9mIHBheWxvYWRQYXlsb2FkXSA9PT0gXCJzdHJpbmdcIlxuICApIHtcbiAgICBjb25maWdMYWJlbEtleSA9IHBheWxvYWRQYXlsb2FkW1xuICAgICAga2V5IGFzIGtleW9mIHR5cGVvZiBwYXlsb2FkUGF5bG9hZFxuICAgIF0gYXMgc3RyaW5nXG4gIH1cblxuICByZXR1cm4gY29uZmlnTGFiZWxLZXkgaW4gY29uZmlnXG4gICAgPyBjb25maWdbY29uZmlnTGFiZWxLZXldXG4gICAgOiBjb25maWdba2V5IGFzIGtleW9mIHR5cGVvZiBjb25maWddXG59XG5cbmV4cG9ydCB7XG4gIENoYXJ0Q29udGFpbmVyLFxuICBDaGFydFRvb2x0aXAsXG4gIENoYXJ0VG9vbHRpcENvbnRlbnQsXG4gIENoYXJ0TGVnZW5kLFxuICBDaGFydExlZ2VuZENvbnRlbnQsXG4gIENoYXJ0U3R5bGUsXG59XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQUtBLEtBQUssTUFBTSxPQUFPO0FBQzlCLE9BQU8sS0FBS0MsaUJBQWlCLE1BQU0sVUFBVTtBQUU3QyxTQUFTQyxFQUFFLFFBQVEsYUFBYTs7QUFFaEM7QUFDQSxNQUFNQyxNQUFNLEdBQUc7RUFBRUMsS0FBSyxFQUFFLEVBQUU7RUFBRUMsSUFBSSxFQUFFO0FBQVEsQ0FBVTtBQWdCcEQsTUFBTUMsWUFBWSxnQkFBR04sS0FBSyxDQUFDTyxhQUFhLENBQTJCLElBQUksQ0FBQztBQUV4RSxTQUFTQyxRQUFRQSxDQUFBLEVBQUc7RUFDbEIsTUFBTUMsT0FBTyxHQUFHVCxLQUFLLENBQUNVLFVBQVUsQ0FBQ0osWUFBWSxDQUFDO0VBRTlDLElBQUksQ0FBQ0csT0FBTyxFQUFFO0lBQ1osTUFBTSxJQUFJRSxLQUFLLENBQUMsbURBQW1ELENBQUM7RUFDdEU7RUFFQSxPQUFPRixPQUFPO0FBQ2hCO0FBRUEsTUFBTUcsY0FBYyxnQkFBR1osS0FBSyxDQUFDYSxVQUFVLENBUXJDLENBQUM7RUFBRUMsRUFBRTtFQUFFQyxTQUFTO0VBQUVDLFFBQVE7RUFBRUMsTUFBTTtFQUFFLEdBQUdDO0FBQU0sQ0FBQyxFQUFFQyxHQUFHLEtBQUs7RUFDeEQsTUFBTUMsUUFBUSxHQUFHcEIsS0FB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