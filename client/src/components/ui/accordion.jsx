function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDown } from "lucide-react";
import { cn } from "../../lib/utils";
const Accordion = AccordionPrimitive.Root;
const AccordionItem = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement(AccordionPrimitive.Item, _extends({
  ref: ref,
  className: cn("border-b", className)
}, props)));
AccordionItem.displayName = "AccordionItem";
const AccordionTrigger = /*#__PURE__*/React.forwardRef(({
  className,
  children,
  ...props
}, ref) => /*#__PURE__*/React.createElement(AccordionPrimitive.Header, {
  className: "flex"
}, /*#__PURE__*/React.createElement(AccordionPrimitive.Trigger, _extends({
  ref: ref,
  className: cn("flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180", className)
}, props), children, /*#__PURE__*/React.createElement(ChevronDown, {
  className: "h-4 w-4 shrink-0 transition-transform duration-200"
}))));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;
const AccordionContent = /*#__PURE__*/React.forwardRef(({
  className,
  children,
  ...props
}, ref) => /*#__PURE__*/React.createElement(AccordionPrimitive.Content, _extends({
  ref: ref,
  className: "overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
}, props), /*#__PURE__*/React.createElement("div", {
  className: cn("pb-4 pt-0", className)
}, children)));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;
export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIkFjY29yZGlvblByaW1pdGl2ZSIsIkNoZXZyb25Eb3duIiwiY24iLCJBY2NvcmRpb24iLCJSb290IiwiQWNjb3JkaW9uSXRlbSIsImZvcndhcmRSZWYiLCJjbGFzc05hbWUiLCJwcm9wcyIsInJlZiIsImNyZWF0ZUVsZW1lbnQiLCJJdGVtIiwiX2V4dGVuZHMiLCJkaXNwbGF5TmFtZSIsIkFjY29yZGlvblRyaWdnZXIiLCJjaGlsZHJlbiIsIkhlYWRlciIsIlRyaWdnZXIiLCJBY2NvcmRpb25Db250ZW50IiwiQ29udGVudCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL2FjY29yZGlvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCAqIGFzIEFjY29yZGlvblByaW1pdGl2ZSBmcm9tIFwiQHJhZGl4LXVpL3JlYWN0LWFjY29yZGlvblwiXG5pbXBvcnQgeyBDaGV2cm9uRG93biB9IGZyb20gXCJsdWNpZGUtcmVhY3RcIlxuXG5pbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYi91dGlsc1wiXG5cbmNvbnN0IEFjY29yZGlvbiA9IEFjY29yZGlvblByaW1pdGl2ZS5Sb290XG5cbmNvbnN0IEFjY29yZGlvbkl0ZW0gPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBBY2NvcmRpb25QcmltaXRpdmUuSXRlbT4sXG4gIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgQWNjb3JkaW9uUHJpbWl0aXZlLkl0ZW0+XG4+KCh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxBY2NvcmRpb25QcmltaXRpdmUuSXRlbVxuICAgIHJlZj17cmVmfVxuICAgIGNsYXNzTmFtZT17Y24oXCJib3JkZXItYlwiLCBjbGFzc05hbWUpfVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbikpXG5BY2NvcmRpb25JdGVtLmRpc3BsYXlOYW1lID0gXCJBY2NvcmRpb25JdGVtXCJcblxuY29uc3QgQWNjb3JkaW9uVHJpZ2dlciA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIEFjY29yZGlvblByaW1pdGl2ZS5UcmlnZ2VyPixcbiAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBBY2NvcmRpb25QcmltaXRpdmUuVHJpZ2dlcj5cbj4oKHsgY2xhc3NOYW1lLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxBY2NvcmRpb25QcmltaXRpdmUuSGVhZGVyIGNsYXNzTmFtZT1cImZsZXhcIj5cbiAgICA8QWNjb3JkaW9uUHJpbWl0aXZlLlRyaWdnZXJcbiAgICAgIHJlZj17cmVmfVxuICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgXCJmbGV4IGZsZXgtMSBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIHB5LTQgZm9udC1tZWRpdW0gdHJhbnNpdGlvbi1hbGwgaG92ZXI6dW5kZXJsaW5lIFsmW2RhdGEtc3RhdGU9b3Blbl0+c3ZnXTpyb3RhdGUtMTgwXCIsXG4gICAgICAgIGNsYXNzTmFtZVxuICAgICAgKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgICA8Q2hldnJvbkRvd24gY2xhc3NOYW1lPVwiaC00IHctNCBzaHJpbmstMCB0cmFuc2l0aW9uLXRyYW5zZm9ybSBkdXJhdGlvbi0yMDBcIiAvPlxuICAgIDwvQWNjb3JkaW9uUHJpbWl0aXZlLlRyaWdnZXI+XG4gIDwvQWNjb3JkaW9uUHJpbWl0aXZlLkhlYWRlcj5cbikpXG5BY2NvcmRpb25UcmlnZ2VyLmRpc3BsYXlOYW1lID0gQWNjb3JkaW9uUHJpbWl0aXZlLlRyaWdnZXIuZGlzcGxheU5hbWVcblxuY29uc3QgQWNjb3JkaW9uQ29udGVudCA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIEFjY29yZGlvblByaW1pdGl2ZS5Db250ZW50PixcbiAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBBY2NvcmRpb25QcmltaXRpdmUuQ29udGVudD5cbj4oKHsgY2xhc3NOYW1lLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxBY2NvcmRpb25QcmltaXRpdmUuQ29udGVudFxuICAgIHJlZj17cmVmfVxuICAgIGNsYXNzTmFtZT1cIm92ZXJmbG93LWhpZGRlbiB0ZXh0LXNtIHRyYW5zaXRpb24tYWxsIGRhdGEtW3N0YXRlPWNsb3NlZF06YW5pbWF0ZS1hY2NvcmRpb24tdXAgZGF0YS1bc3RhdGU9b3Blbl06YW5pbWF0ZS1hY2NvcmRpb24tZG93blwiXG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdiBjbGFzc05hbWU9e2NuKFwicGItNCBwdC0wXCIsIGNsYXNzTmFtZSl9PntjaGlsZHJlbn08L2Rpdj5cbiAgPC9BY2NvcmRpb25QcmltaXRpdmUuQ29udGVudD5cbikpXG5cbkFjY29yZGlvbkNvbnRlbnQuZGlzcGxheU5hbWUgPSBBY2NvcmRpb25QcmltaXRpdmUuQ29udGVudC5kaXNwbGF5TmFtZVxuXG5leHBvcnQgeyBBY2NvcmRpb24sIEFjY29yZGlvbkl0ZW0sIEFjY29yZGlvblRyaWdnZXIsIEFjY29yZGlvbkNvbnRlbnQgfVxuIl0sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxLQUFLQSxLQUFLLE1BQU0sT0FBTztBQUM5QixPQUFPLEtBQUtDLGtCQUFrQixNQUFNLDJCQUEyQjtBQUMvRCxTQUFTQyxXQUFXLFFBQVEsY0FBYztBQUUxQyxTQUFTQyxFQUFFLFFBQVEsYUFBYTtBQUVoQyxNQUFNQyxTQUFTLEdBQUdILGtCQUFrQixDQUFDSSxJQUFJO0FBRXpDLE1BQU1DLGFBQWEsZ0JBQUdOLEtBQUssQ0FBQ08sVUFBVSxDQUdwQyxDQUFDO0VBQUVDLFNBQVM7RUFBRSxHQUFHQztBQUFNLENBQUMsRUFBRUMsR0FBRyxrQkFDN0JWLEtBQUEsQ0FBQVcsYUFBQSxDQUFDVixrQkFBa0IsQ0FBQ1csSUFBSSxFQUFBQyxRQUFBO0VBQ3RCSCxHQUFHLEVBQUVBLEdBQUk7RUFDVEYsU0FBUyxFQUFFTCxFQUFFLENBQUMsVUFBVSxFQUFFSyxTQUFTO0FBQUUsR0FDakNDLEtBQUssQ0FDVixDQUNGLENBQUM7QUFDRkgsYUFBYSxDQUFDUSxXQUFXLEdBQUcsZUFBZTtBQUUzQyxNQUFNQyxnQkFBZ0IsZ0JBQUdmLEtBQUssQ0FBQ08sVUFBVSxDQUd2QyxDQUFDO0VBQUVDLFNBQVM7RUFBRVEsUUFBUTtFQUFFLEdBQUdQO0FBQU0sQ0FBQyxFQUFFQyxHQUFHLGtCQUN2Q1YsS0FBQSxDQUFBVyxhQUFBLENBQUNWLGtCQUFrQixDQUFDZ0IsTUFBTTtFQUFDVCxTQUFTLEVBQUM7QUFBTSxnQkFDekNSLEtBQUEsQ0FBQVcsYUFBQSxDQUFDVixrQkFBa0IsQ0FBQ2lCLE9BQU8sRUFBQUwsUUFBQTtFQUN6QkgsR0FBRyxFQUFFQSxHQUFJO0VBQ1RGLFNBQVMsRUFBRUwsRUFBRSxDQUNYLDhIQUE4SCxFQUM5SEssU0FDRjtBQUFFLEdBQ0VDLEtBQUssR0FFUk8sUUFBUSxlQUNUaEIsS0FBQSxDQUFBVyxhQUFBLENBQUNULFdBQVc7RUFBQ00sU0FBUyxFQUFDO0FBQW9ELENBQUUsQ0FDbkQsQ0FDSCxDQUM1QixDQUFDO0FBQ0ZPLGdCQUFnQixDQUFDRCxXQUFXLEdBQUdiLGtCQUFrQixDQUFDaUIsT0FBTyxDQUFDSixXQUFXO0FBRXJFLE1BQU1LLGdCQUFnQixnQkFBR25CLEtBQUssQ0FBQ08sVUFBVSxDQUd2QyxDQUFDO0VBQUVDLFNBQVM7RUFBRVEsUUFBUTtFQUFFLEdBQUdQO0FBQU0sQ0FBQyxFQUFFQyxHQUFHLGtCQUN2Q1YsS0FBQSxDQUFBVyxhQUFBLENBQUNWLGtCQUFrQixDQUFDbUIsT0FBTyxFQUFBUCxRQUFBO0VBQ3pCSCxHQUFHLEVBQUVBLEdBQUk7RUFDVEYsU0FBUyxFQUFDO0FBQTBILEdBQ2hJQyxLQUFLLGdCQUVUVCxLQUFBLENBQUFXLGFBQUE7RUFBS0gsU0FBUyxFQUFFTCxFQUFFLENBQUMsV0FBVyxFQUFFSyxTQUFTO0FBQUUsR0FBRVEsUUFBYyxDQUNqQyxDQUM3QixDQUFDO0FBRUZHLGdCQUFnQixDQUFDTCxXQUFXLEdBQUdiLGtCQUFrQixDQUFDbUIsT0FBTyxDQUFDTixXQUFXO0FBRXJFLFNBQVNWLFNBQVMsRUFBRUUsYUFBYSxFQUFFUyxnQkFBZ0IsRUFBRUksZ0JBQWdCIiwiaWdub3JlTGlzdCI6W119