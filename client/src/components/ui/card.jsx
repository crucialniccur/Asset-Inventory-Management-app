function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import * as React from "react";
import { cn } from "@/lib/utils";
const Card = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement("div", _extends({
  ref: ref,
  className: cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)
}, props)));
Card.displayName = "Card";
const CardHeader = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement("div", _extends({
  ref: ref,
  className: cn("flex flex-col space-y-1.5 p-6", className)
}, props)));
CardHeader.displayName = "CardHeader";
const CardTitle = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement("h3", _extends({
  ref: ref,
  className: cn("text-2xl font-semibold leading-none tracking-tight", className)
}, props)));
CardTitle.displayName = "CardTitle";
const CardDescription = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement("p", _extends({
  ref: ref,
  className: cn("text-sm text-muted-foreground", className)
}, props)));
CardDescription.displayName = "CardDescription";
const CardContent = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement("div", _extends({
  ref: ref,
  className: cn("p-6 pt-0", className)
}, props)));
CardContent.displayName = "CardContent";
const CardFooter = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement("div", _extends({
  ref: ref,
  className: cn("flex items-center p-6 pt-0", className)
}, props)));
CardFooter.displayName = "CardFooter";
export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsImNuIiwiQ2FyZCIsImZvcndhcmRSZWYiLCJjbGFzc05hbWUiLCJwcm9wcyIsInJlZiIsImNyZWF0ZUVsZW1lbnQiLCJfZXh0ZW5kcyIsImRpc3BsYXlOYW1lIiwiQ2FyZEhlYWRlciIsIkNhcmRUaXRsZSIsIkNhcmREZXNjcmlwdGlvbiIsIkNhcmRDb250ZW50IiwiQ2FyZEZvb3RlciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VpL2NhcmQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiXG5cbmltcG9ydCB7IGNuIH0gZnJvbSBcIkAvbGliL3V0aWxzXCJcblxuY29uc3QgQ2FyZCA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIEhUTUxEaXZFbGVtZW50LFxuICBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD5cbj4oKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IChcbiAgPGRpdlxuICAgIHJlZj17cmVmfVxuICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICBcInJvdW5kZWQtbGcgYm9yZGVyIGJnLWNhcmQgdGV4dC1jYXJkLWZvcmVncm91bmQgc2hhZG93LXNtXCIsXG4gICAgICBjbGFzc05hbWVcbiAgICApfVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbikpXG5DYXJkLmRpc3BsYXlOYW1lID0gXCJDYXJkXCJcblxuY29uc3QgQ2FyZEhlYWRlciA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIEhUTUxEaXZFbGVtZW50LFxuICBSZWFjdC5IVE1MQXR0cmlidXRlczxIVE1MRGl2RWxlbWVudD5cbj4oKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IChcbiAgPGRpdlxuICAgIHJlZj17cmVmfVxuICAgIGNsYXNzTmFtZT17Y24oXCJmbGV4IGZsZXgtY29sIHNwYWNlLXktMS41IHAtNlwiLCBjbGFzc05hbWUpfVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbikpXG5DYXJkSGVhZGVyLmRpc3BsYXlOYW1lID0gXCJDYXJkSGVhZGVyXCJcblxuY29uc3QgQ2FyZFRpdGxlID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgSFRNTFBhcmFncmFwaEVsZW1lbnQsXG4gIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxIZWFkaW5nRWxlbWVudD5cbj4oKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IChcbiAgPGgzXG4gICAgcmVmPXtyZWZ9XG4gICAgY2xhc3NOYW1lPXtjbihcbiAgICAgIFwidGV4dC0yeGwgZm9udC1zZW1pYm9sZCBsZWFkaW5nLW5vbmUgdHJhY2tpbmctdGlnaHRcIixcbiAgICAgIGNsYXNzTmFtZVxuICAgICl9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKSlcbkNhcmRUaXRsZS5kaXNwbGF5TmFtZSA9IFwiQ2FyZFRpdGxlXCJcblxuY29uc3QgQ2FyZERlc2NyaXB0aW9uID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgSFRNTFBhcmFncmFwaEVsZW1lbnQsXG4gIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxQYXJhZ3JhcGhFbGVtZW50PlxuPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICA8cFxuICAgIHJlZj17cmVmfVxuICAgIGNsYXNzTmFtZT17Y24oXCJ0ZXh0LXNtIHRleHQtbXV0ZWQtZm9yZWdyb3VuZFwiLCBjbGFzc05hbWUpfVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbikpXG5DYXJkRGVzY3JpcHRpb24uZGlzcGxheU5hbWUgPSBcIkNhcmREZXNjcmlwdGlvblwiXG5cbmNvbnN0IENhcmRDb250ZW50ID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgSFRNTERpdkVsZW1lbnQsXG4gIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PlxuPigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICA8ZGl2IHJlZj17cmVmfSBjbGFzc05hbWU9e2NuKFwicC02IHB0LTBcIiwgY2xhc3NOYW1lKX0gey4uLnByb3BzfSAvPlxuKSlcbkNhcmRDb250ZW50LmRpc3BsYXlOYW1lID0gXCJDYXJkQ29udGVudFwiXG5cbmNvbnN0IENhcmRGb290ZXIgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBIVE1MRGl2RWxlbWVudCxcbiAgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+XG4+KCh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxkaXZcbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2NuKFwiZmxleCBpdGVtcy1jZW50ZXIgcC02IHB0LTBcIiwgY2xhc3NOYW1lKX1cbiAgICB7Li4ucHJvcHN9XG4gIC8+XG4pKVxuQ2FyZEZvb3Rlci5kaXNwbGF5TmFtZSA9IFwiQ2FyZEZvb3RlclwiXG5cbmV4cG9ydCB7IENhcmQsIENhcmRIZWFkZXIsIENhcmRGb290ZXIsIENhcmRUaXRsZSwgQ2FyZERlc2NyaXB0aW9uLCBDYXJkQ29udGVudCB9XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQUtBLEtBQUssTUFBTSxPQUFPO0FBRTlCLFNBQVNDLEVBQUUsUUFBUSxhQUFhO0FBRWhDLE1BQU1DLElBQUksZ0JBQUdGLEtBQUssQ0FBQ0csVUFBVSxDQUczQixDQUFDO0VBQUVDLFNBQVM7RUFBRSxHQUFHQztBQUFNLENBQUMsRUFBRUMsR0FBRyxrQkFDN0JOLEtBQUEsQ0FBQU8sYUFBQSxRQUFBQyxRQUFBO0VBQ0VGLEdBQUcsRUFBRUEsR0FBSTtFQUNURixTQUFTLEVBQUVILEVBQUUsQ0FDWCwwREFBMEQsRUFDMURHLFNBQ0Y7QUFBRSxHQUNFQyxLQUFLLENBQ1YsQ0FDRixDQUFDO0FBQ0ZILElBQUksQ0FBQ08sV0FBVyxHQUFHLE1BQU07QUFFekIsTUFBTUMsVUFBVSxnQkFBR1YsS0FBSyxDQUFDRyxVQUFVLENBR2pDLENBQUM7RUFBRUMsU0FBUztFQUFFLEdBQUdDO0FBQU0sQ0FBQyxFQUFFQyxHQUFHLGtCQUM3Qk4sS0FBQSxDQUFBTyxhQUFBLFFBQUFDLFFBQUE7RUFDRUYsR0FBRyxFQUFFQSxHQUFJO0VBQ1RGLFNBQVMsRUFBRUgsRUFBRSxDQUFDLCtCQUErQixFQUFFRyxTQUFTO0FBQUUsR0FDdERDLEtBQUssQ0FDVixDQUNGLENBQUM7QUFDRkssVUFBVSxDQUFDRCxXQUFXLEdBQUcsWUFBWTtBQUVyQyxNQUFNRSxTQUFTLGdCQUFHWCxLQUFLLENBQUNHLFVBQVUsQ0FHaEMsQ0FBQztFQUFFQyxTQUFTO0VBQUUsR0FBR0M7QUFBTSxDQUFDLEVBQUVDLEdBQUcsa0JBQzdCTixLQUFBLENBQUFPLGFBQUEsT0FBQUMsUUFBQTtFQUNFRixHQUFHLEVBQUVBLEdBQUk7RUFDVEYsU0FBUyxFQUFFSCxFQUFFLENBQ1gsb0RBQW9ELEVBQ3BERyxTQUNGO0FBQUUsR0FDRUMsS0FBSyxDQUNWLENBQ0YsQ0FBQztBQUNGTSxTQUFTLENBQUNGLFdBQVcsR0FBRyxXQUFXO0FBRW5DLE1BQU1HLGVBQWUsZ0JBQUdaLEtBQUssQ0FBQ0csVUFBVSxDQUd0QyxDQUFDO0VBQUVDLFNBQVM7RUFBRSxHQUFHQztBQUFNLENBQUMsRUFBRUMsR0FBRyxrQkFDN0JOLEtBQUEsQ0FBQU8sYUFBQSxNQUFBQyxRQUFBO0VBQ0VGLEdBQUcsRUFBRUEsR0FBSTtFQUNURixTQUFTLEVBQUVILEVBQUUsQ0FBQywrQkFBK0IsRUFBRUcsU0FBUztBQUFFLEdBQ3REQyxLQUFLLENBQ1YsQ0FDRixDQUFDO0FBQ0ZPLGVBQWUsQ0FBQ0gsV0FBVyxHQUFHLGlCQUFpQjtBQUUvQyxNQUFNSSxXQUFXLGdCQUFHYixLQUFLLENBQUNHLFVBQVUsQ0FHbEMsQ0FBQztFQUFFQyxTQUFTO0VBQUUsR0FBR0M7QUFBTSxDQUFDLEVBQUVDLEdBQUcsa0JBQzdCTixLQUFBLENBQUFPLGFBQUEsUUFBQUMsUUFBQTtFQUFLRixHQUFHLEVBQUVBLEdBQUk7RUFBQ0YsU0FBUyxFQUFFSCxFQUFFLENBQUMsVUFBVSxFQUFFRyxTQUFTO0FBQUUsR0FBS0MsS0FBSyxDQUFHLENBQ2xFLENBQUM7QUFDRlEsV0FBVyxDQUFDSixXQUFXLEdBQUcsYUFBYTtBQUV2QyxNQUFNSyxVQUFVLGdCQUFHZCxLQUFLLENBQUNHLFVBQVUsQ0FHakMsQ0FBQztFQUFFQyxTQUFTO0VBQUUsR0FBR0M7QUFBTSxDQUFDLEVBQUVDLEdBQUcsa0JBQzdCTixLQUFBLENBQUFPLGFBQUEsUUFBQUMsUUFBQTtFQUNFRixHQUFHLEVBQUVBLEdBQUk7RUFDVEYsU0FBUyxFQUFFSCxFQUFFLENBQUMsNEJBQTRCLEVBQUVHLFNBQVM7QUFBRSxHQUNuREMsS0FBSyxDQUNWLENBQ0YsQ0FBQztBQUNGUyxVQUFVLENBQUNMLFdBQVcsR0FBRyxZQUFZO0FBRXJDLFNBQVNQLElBQUksRUFBRVEsVUFBVSxFQUFFSSxVQUFVLEVBQUVILFNBQVMsRUFBRUMsZUFBZSxFQUFFQyxXQUFXIiwiaWdub3JlTGlzdCI6W119