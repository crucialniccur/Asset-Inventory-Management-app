function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import * as React from "react";
import { Command as CommandPrimitive } from "cmdk";
import { Search } from "lucide-react";
import { cn } from "@/lib/utils";
import { Dialog, DialogContent } from "@/components/ui/dialog";
const Command = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement(CommandPrimitive, _extends({
  ref: ref,
  className: cn("flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground", className)
}, props)));
Command.displayName = CommandPrimitive.displayName;
const CommandDialog = ({
  children,
  ...props
}) => {
  return /*#__PURE__*/React.createElement(Dialog, props, /*#__PURE__*/React.createElement(DialogContent, {
    className: "overflow-hidden p-0 shadow-lg"
  }, /*#__PURE__*/React.createElement(Command, {
    className: "[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5"
  }, children)));
};
const CommandInput = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement("div", {
  className: "flex items-center border-b px-3",
  "cmdk-input-wrapper": ""
}, /*#__PURE__*/React.createElement(Search, {
  className: "mr-2 h-4 w-4 shrink-0 opacity-50"
}), /*#__PURE__*/React.createElement(CommandPrimitive.Input, _extends({
  ref: ref,
  className: cn("flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50", className)
}, props))));
CommandInput.displayName = CommandPrimitive.Input.displayName;
const CommandList = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement(CommandPrimitive.List, _extends({
  ref: ref,
  className: cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)
}, props)));
CommandList.displayName = CommandPrimitive.List.displayName;
const CommandEmpty = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(CommandPrimitive.Empty, _extends({
  ref: ref,
  className: "py-6 text-center text-sm"
}, props)));
CommandEmpty.displayName = CommandPrimitive.Empty.displayName;
const CommandGroup = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement(CommandPrimitive.Group, _extends({
  ref: ref,
  className: cn("overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground", className)
}, props)));
CommandGroup.displayName = CommandPrimitive.Group.displayName;
const CommandSeparator = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement(CommandPrimitive.Separator, _extends({
  ref: ref,
  className: cn("-mx-1 h-px bg-border", className)
}, props)));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;
const CommandItem = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement(CommandPrimitive.Item, _extends({
  ref: ref,
  className: cn("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50", className)
}, props)));
CommandItem.displayName = CommandPrimitive.Item.displayName;
const CommandShortcut = ({
  className,
  ...props
}) => {
  return /*#__PURE__*/React.createElement("span", _extends({
    className: cn("ml-auto text-xs tracking-widest text-muted-foreground", className)
  }, props));
};
CommandShortcut.displayName = "CommandShortcut";
export { Command, CommandDialog, CommandInput, CommandList, CommandEmpty, CommandGroup, CommandItem, CommandShortcut, CommandSeparator };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,