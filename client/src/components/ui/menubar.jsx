function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import * as React from "react";
import * as MenubarPrimitive from "@radix-ui/react-menubar";
import { Check, ChevronRight, Circle } from "lucide-react";
import { cn } from "../../lib/utils";
const MenubarMenu = MenubarPrimitive.Menu;
const MenubarGroup = MenubarPrimitive.Group;
const MenubarPortal = MenubarPrimitive.Portal;
const MenubarSub = MenubarPrimitive.Sub;
const MenubarRadioGroup = MenubarPrimitive.RadioGroup;
const Menubar = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement(MenubarPrimitive.Root, _extends({
  ref: ref,
  className: cn("flex h-10 items-center space-x-1 rounded-md border bg-background p-1", className)
}, props)));
Menubar.displayName = MenubarPrimitive.Root.displayName;
const MenubarTrigger = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement(MenubarPrimitive.Trigger, _extends({
  ref: ref,
  className: cn("flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground", className)
}, props)));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;
const MenubarSubTrigger = /*#__PURE__*/React.forwardRef(({
  className,
  inset,
  children,
  ...props
}, ref) => /*#__PURE__*/React.createElement(MenubarPrimitive.SubTrigger, _extends({
  ref: ref,
  className: cn("flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground", inset && "pl-8", className)
}, props), children, /*#__PURE__*/React.createElement(ChevronRight, {
  className: "ml-auto h-4 w-4"
})));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;
const MenubarSubContent = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement(MenubarPrimitive.SubContent, _extends({
  ref: ref,
  className: cn("z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", className)
}, props)));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;
const MenubarContent = /*#__PURE__*/React.forwardRef(({
  className,
  align = "start",
  alignOffset = -4,
  sideOffset = 8,
  ...props
}, ref) => /*#__PURE__*/React.createElement(MenubarPrimitive.Portal, null, /*#__PURE__*/React.createElement(MenubarPrimitive.Content, _extends({
  ref: ref,
  align: align,
  alignOffset: alignOffset,
  sideOffset: sideOffset,
  className: cn("z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", className)
}, props))));
MenubarContent.displayName = MenubarPrimitive.Content.displayName;
const MenubarItem = /*#__PURE__*/React.forwardRef(({
  className,
  inset,
  ...props
}, ref) => /*#__PURE__*/React.createElement(MenubarPrimitive.Item, _extends({
  ref: ref,
  className: cn("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", inset && "pl-8", className)
}, props)));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;
const MenubarCheckboxItem = /*#__PURE__*/React.forwardRef(({
  className,
  children,
  checked,
  ...props
}, ref) => /*#__PURE__*/React.createElement(MenubarPrimitive.CheckboxItem, _extends({
  ref: ref,
  className: cn("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className),
  checked: checked
}, props), /*#__PURE__*/React.createElement("span", {
  className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center"
}, /*#__PURE__*/React.createElement(MenubarPrimitive.ItemIndicator, null, /*#__PURE__*/React.createElement(Check, {
  className: "h-4 w-4"
}))), children));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;
const MenubarRadioItem = /*#__PURE__*/React.forwardRef(({
  className,
  children,
  ...props
}, ref) => /*#__PURE__*/React.createElement(MenubarPrimitive.RadioItem, _extends({
  ref: ref,
  className: cn("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className)
}, props), /*#__PURE__*/React.createElement("span", {
  className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center"
}, /*#__PURE__*/React.createElement(MenubarPrimitive.ItemIndicator, null, /*#__PURE__*/React.createElement(Circle, {
  className: "h-2 w-2 fill-current"
}))), children));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;
const MenubarLabel = /*#__PURE__*/React.forwardRef(({
  className,
  inset,
  ...props
}, ref) => /*#__PURE__*/React.createElement(MenubarPrimitive.Label, _extends({
  ref: ref,
  className: cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)
}, props)));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;
const MenubarSeparator = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React.createElement(MenubarPrimitive.Separator, _extends({
  ref: ref,
  className: cn("-mx-1 my-1 h-px bg-muted", className)
}, props)));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;
const MenubarShortcut = ({
  className,
  ...props
}) => {
  return /*#__PURE__*/React.createElement("span", _extends({
    className: cn("ml-auto text-xs tracking-widest text-muted-foreground", className)
  }, props));
};
MenubarShortcut.displayname = "MenubarShortcut";
export { Menubar, MenubarMenu, MenubarTrigger, MenubarContent, MenubarItem, MenubarSeparator, MenubarLabel, MenubarCheckboxItem, MenubarRadioGroup, MenubarRadioItem, MenubarPortal, MenubarSubContent, MenubarSubTrigger, MenubarGroup, MenubarSub, MenubarShortcut };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIk1lbnViYXJQcmltaXRpdmUiLCJDaGVjayIsIkNoZXZyb25SaWdodCIsIkNpcmNsZSIsImNuIiwiTWVudWJhck1lbnUiLCJNZW51IiwiTWVudWJhckdyb3VwIiwiR3JvdXAiLCJNZW51YmFyUG9ydGFsIiwiUG9ydGFsIiwiTWVudWJhclN1YiIsIlN1YiIsIk1lbnViYXJSYWRpb0dyb3VwIiwiUmFkaW9Hcm91cCIsIk1lbnViYXIiLCJmb3J3YXJkUmVmIiwiY2xhc3NOYW1lIiwicHJvcHMiLCJyZWYiLCJjcmVhdGVFbGVtZW50IiwiUm9vdCIsIl9leHRlbmRzIiwiZGlzcGxheU5hbWUiLCJNZW51YmFyVHJpZ2dlciIsIlRyaWdnZXIiLCJNZW51YmFyU3ViVHJpZ2dlciIsImluc2V0IiwiY2hpbGRyZW4iLCJTdWJUcmlnZ2VyIiwiTWVudWJhclN1YkNvbnRlbnQiLCJTdWJDb250ZW50IiwiTWVudWJhckNvbnRlbnQiLCJhbGlnbiIsImFsaWduT2Zmc2V0Iiwic2lkZU9mZnNldCIsIkNvbnRlbnQiLCJNZW51YmFySXRlbSIsIkl0ZW0iLCJNZW51YmFyQ2hlY2tib3hJdGVtIiwiY2hlY2tlZCIsIkNoZWNrYm94SXRlbSIsIkl0ZW1JbmRpY2F0b3IiLCJNZW51YmFyUmFkaW9JdGVtIiwiUmFkaW9JdGVtIiwiTWVudWJhckxhYmVsIiwiTGFiZWwiLCJNZW51YmFyU2VwYXJhdG9yIiwiU2VwYXJhdG9yIiwiTWVudWJhclNob3J0Y3V0IiwiZGlzcGxheW5hbWUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy91aS9tZW51YmFyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0ICogYXMgTWVudWJhclByaW1pdGl2ZSBmcm9tIFwiQHJhZGl4LXVpL3JlYWN0LW1lbnViYXJcIlxuaW1wb3J0IHsgQ2hlY2ssIENoZXZyb25SaWdodCwgQ2lyY2xlIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiXG5cbmltcG9ydCB7IGNuIH0gZnJvbSBcIkAvbGliL3V0aWxzXCJcblxuY29uc3QgTWVudWJhck1lbnUgPSBNZW51YmFyUHJpbWl0aXZlLk1lbnVcblxuY29uc3QgTWVudWJhckdyb3VwID0gTWVudWJhclByaW1pdGl2ZS5Hcm91cFxuXG5jb25zdCBNZW51YmFyUG9ydGFsID0gTWVudWJhclByaW1pdGl2ZS5Qb3J0YWxcblxuY29uc3QgTWVudWJhclN1YiA9IE1lbnViYXJQcmltaXRpdmUuU3ViXG5cbmNvbnN0IE1lbnViYXJSYWRpb0dyb3VwID0gTWVudWJhclByaW1pdGl2ZS5SYWRpb0dyb3VwXG5cbmNvbnN0IE1lbnViYXIgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBNZW51YmFyUHJpbWl0aXZlLlJvb3Q+LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIE1lbnViYXJQcmltaXRpdmUuUm9vdD5cbj4oKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IChcbiAgPE1lbnViYXJQcmltaXRpdmUuUm9vdFxuICAgIHJlZj17cmVmfVxuICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICBcImZsZXggaC0xMCBpdGVtcy1jZW50ZXIgc3BhY2UteC0xIHJvdW5kZWQtbWQgYm9yZGVyIGJnLWJhY2tncm91bmQgcC0xXCIsXG4gICAgICBjbGFzc05hbWVcbiAgICApfVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbikpXG5NZW51YmFyLmRpc3BsYXlOYW1lID0gTWVudWJhclByaW1pdGl2ZS5Sb290LmRpc3BsYXlOYW1lXG5cbmNvbnN0IE1lbnViYXJUcmlnZ2VyID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgTWVudWJhclByaW1pdGl2ZS5UcmlnZ2VyPixcbiAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBNZW51YmFyUHJpbWl0aXZlLlRyaWdnZXI+XG4+KCh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxNZW51YmFyUHJpbWl0aXZlLlRyaWdnZXJcbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgXCJmbGV4IGN1cnNvci1kZWZhdWx0IHNlbGVjdC1ub25lIGl0ZW1zLWNlbnRlciByb3VuZGVkLXNtIHB4LTMgcHktMS41IHRleHQtc20gZm9udC1tZWRpdW0gb3V0bGluZS1ub25lIGZvY3VzOmJnLWFjY2VudCBmb2N1czp0ZXh0LWFjY2VudC1mb3JlZ3JvdW5kIGRhdGEtW3N0YXRlPW9wZW5dOmJnLWFjY2VudCBkYXRhLVtzdGF0ZT1vcGVuXTp0ZXh0LWFjY2VudC1mb3JlZ3JvdW5kXCIsXG4gICAgICBjbGFzc05hbWVcbiAgICApfVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbikpXG5NZW51YmFyVHJpZ2dlci5kaXNwbGF5TmFtZSA9IE1lbnViYXJQcmltaXRpdmUuVHJpZ2dlci5kaXNwbGF5TmFtZVxuXG5jb25zdCBNZW51YmFyU3ViVHJpZ2dlciA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIE1lbnViYXJQcmltaXRpdmUuU3ViVHJpZ2dlcj4sXG4gIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgTWVudWJhclByaW1pdGl2ZS5TdWJUcmlnZ2VyPiAmIHtcbiAgICBpbnNldD86IGJvb2xlYW5cbiAgfVxuPigoeyBjbGFzc05hbWUsIGluc2V0LCBjaGlsZHJlbiwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxNZW51YmFyUHJpbWl0aXZlLlN1YlRyaWdnZXJcbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgXCJmbGV4IGN1cnNvci1kZWZhdWx0IHNlbGVjdC1ub25lIGl0ZW1zLWNlbnRlciByb3VuZGVkLXNtIHB4LTIgcHktMS41IHRleHQtc20gb3V0bGluZS1ub25lIGZvY3VzOmJnLWFjY2VudCBmb2N1czp0ZXh0LWFjY2VudC1mb3JlZ3JvdW5kIGRhdGEtW3N0YXRlPW9wZW5dOmJnLWFjY2VudCBkYXRhLVtzdGF0ZT1vcGVuXTp0ZXh0LWFjY2VudC1mb3JlZ3JvdW5kXCIsXG4gICAgICBpbnNldCAmJiBcInBsLThcIixcbiAgICAgIGNsYXNzTmFtZVxuICAgICl9XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAge2NoaWxkcmVufVxuICAgIDxDaGV2cm9uUmlnaHQgY2xhc3NOYW1lPVwibWwtYXV0byBoLTQgdy00XCIgLz5cbiAgPC9NZW51YmFyUHJpbWl0aXZlLlN1YlRyaWdnZXI+XG4pKVxuTWVudWJhclN1YlRyaWdnZXIuZGlzcGxheU5hbWUgPSBNZW51YmFyUHJpbWl0aXZlLlN1YlRyaWdnZXIuZGlzcGxheU5hbWVcblxuY29uc3QgTWVudWJhclN1YkNvbnRlbnQgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBNZW51YmFyUHJpbWl0aXZlLlN1YkNvbnRlbnQ+LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIE1lbnViYXJQcmltaXRpdmUuU3ViQ29udGVudD5cbj4oKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IChcbiAgPE1lbnViYXJQcmltaXRpdmUuU3ViQ29udGVudFxuICAgIHJlZj17cmVmfVxuICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICBcInotNTAgbWluLXctWzhyZW1dIG92ZXJmbG93LWhpZGRlbiByb3VuZGVkLW1kIGJvcmRlciBiZy1wb3BvdmVyIHAtMSB0ZXh0LXBvcG92ZXItZm9yZWdyb3VuZCBkYXRhLVtzdGF0ZT1vcGVuXTphbmltYXRlLWluIGRhdGEtW3N0YXRlPWNsb3NlZF06YW5pbWF0ZS1vdXQgZGF0YS1bc3RhdGU9Y2xvc2VkXTpmYWRlLW91dC0wIGRhdGEtW3N0YXRlPW9wZW5dOmZhZGUtaW4tMCBkYXRhLVtzdGF0ZT1jbG9zZWRdOnpvb20tb3V0LTk1IGRhdGEtW3N0YXRlPW9wZW5dOnpvb20taW4tOTUgZGF0YS1bc2lkZT1ib3R0b21dOnNsaWRlLWluLWZyb20tdG9wLTIgZGF0YS1bc2lkZT1sZWZ0XTpzbGlkZS1pbi1mcm9tLXJpZ2h0LTIgZGF0YS1bc2lkZT1yaWdodF06c2xpZGUtaW4tZnJvbS1sZWZ0LTIgZGF0YS1bc2lkZT10b3BdOnNsaWRlLWluLWZyb20tYm90dG9tLTJcIixcbiAgICAgIGNsYXNzTmFtZVxuICAgICl9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKSlcbk1lbnViYXJTdWJDb250ZW50LmRpc3BsYXlOYW1lID0gTWVudWJhclByaW1pdGl2ZS5TdWJDb250ZW50LmRpc3BsYXlOYW1lXG5cbmNvbnN0IE1lbnViYXJDb250ZW50ID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgTWVudWJhclByaW1pdGl2ZS5Db250ZW50PixcbiAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBNZW51YmFyUHJpbWl0aXZlLkNvbnRlbnQ+XG4+KFxuICAoXG4gICAgeyBjbGFzc05hbWUsIGFsaWduID0gXCJzdGFydFwiLCBhbGlnbk9mZnNldCA9IC00LCBzaWRlT2Zmc2V0ID0gOCwgLi4ucHJvcHMgfSxcbiAgICByZWZcbiAgKSA9PiAoXG4gICAgPE1lbnViYXJQcmltaXRpdmUuUG9ydGFsPlxuICAgICAgPE1lbnViYXJQcmltaXRpdmUuQ29udGVudFxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgYWxpZ249e2FsaWdufVxuICAgICAgICBhbGlnbk9mZnNldD17YWxpZ25PZmZzZXR9XG4gICAgICAgIHNpZGVPZmZzZXQ9e3NpZGVPZmZzZXR9XG4gICAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICAgICAgXCJ6LTUwIG1pbi13LVsxMnJlbV0gb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQtbWQgYm9yZGVyIGJnLXBvcG92ZXIgcC0xIHRleHQtcG9wb3Zlci1mb3JlZ3JvdW5kIHNoYWRvdy1tZCBkYXRhLVtzdGF0ZT1vcGVuXTphbmltYXRlLWluIGRhdGEtW3N0YXRlPWNsb3NlZF06ZmFkZS1vdXQtMCBkYXRhLVtzdGF0ZT1vcGVuXTpmYWRlLWluLTAgZGF0YS1bc3RhdGU9Y2xvc2VkXTp6b29tLW91dC05NSBkYXRhLVtzdGF0ZT1vcGVuXTp6b29tLWluLTk1IGRhdGEtW3NpZGU9Ym90dG9tXTpzbGlkZS1pbi1mcm9tLXRvcC0yIGRhdGEtW3NpZGU9bGVmdF06c2xpZGUtaW4tZnJvbS1yaWdodC0yIGRhdGEtW3NpZGU9cmlnaHRdOnNsaWRlLWluLWZyb20tbGVmdC0yIGRhdGEtW3NpZGU9dG9wXTpzbGlkZS1pbi1mcm9tLWJvdHRvbS0yXCIsXG4gICAgICAgICAgY2xhc3NOYW1lXG4gICAgICAgICl9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgIC8+XG4gICAgPC9NZW51YmFyUHJpbWl0aXZlLlBvcnRhbD5cbiAgKVxuKVxuTWVudWJhckNvbnRlbnQuZGlzcGxheU5hbWUgPSBNZW51YmFyUHJpbWl0aXZlLkNvbnRlbnQuZGlzcGxheU5hbWVcblxuY29uc3QgTWVudWJhckl0ZW0gPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBNZW51YmFyUHJpbWl0aXZlLkl0ZW0+LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIE1lbnViYXJQcmltaXRpdmUuSXRlbT4gJiB7XG4gICAgaW5zZXQ/OiBib29sZWFuXG4gIH1cbj4oKHsgY2xhc3NOYW1lLCBpbnNldCwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxNZW51YmFyUHJpbWl0aXZlLkl0ZW1cbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgXCJyZWxhdGl2ZSBmbGV4IGN1cnNvci1kZWZhdWx0IHNlbGVjdC1ub25lIGl0ZW1zLWNlbnRlciByb3VuZGVkLXNtIHB4LTIgcHktMS41IHRleHQtc20gb3V0bGluZS1ub25lIGZvY3VzOmJnLWFjY2VudCBmb2N1czp0ZXh0LWFjY2VudC1mb3JlZ3JvdW5kIGRhdGEtW2Rpc2FibGVkXTpwb2ludGVyLWV2ZW50cy1ub25lIGRhdGEtW2Rpc2FibGVkXTpvcGFjaXR5LTUwXCIsXG4gICAgICBpbnNldCAmJiBcInBsLThcIixcbiAgICAgIGNsYXNzTmFtZVxuICAgICl9XG4gICAgey4uLnByb3BzfVxuICAvPlxuKSlcbk1lbnViYXJJdGVtLmRpc3BsYXlOYW1lID0gTWVudWJhclByaW1pdGl2ZS5JdGVtLmRpc3BsYXlOYW1lXG5cbmNvbnN0IE1lbnViYXJDaGVja2JveEl0ZW0gPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBNZW51YmFyUHJpbWl0aXZlLkNoZWNrYm94SXRlbT4sXG4gIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgTWVudWJhclByaW1pdGl2ZS5DaGVja2JveEl0ZW0+XG4+KCh7IGNsYXNzTmFtZSwgY2hpbGRyZW4sIGNoZWNrZWQsIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICA8TWVudWJhclByaW1pdGl2ZS5DaGVja2JveEl0ZW1cbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgXCJyZWxhdGl2ZSBmbGV4IGN1cnNvci1kZWZhdWx0IHNlbGVjdC1ub25lIGl0ZW1zLWNlbnRlciByb3VuZGVkLXNtIHB5LTEuNSBwbC04IHByLTIgdGV4dC1zbSBvdXRsaW5lLW5vbmUgZm9jdXM6YmctYWNjZW50IGZvY3VzOnRleHQtYWNjZW50LWZvcmVncm91bmQgZGF0YS1bZGlzYWJsZWRdOnBvaW50ZXItZXZlbnRzLW5vbmUgZGF0YS1bZGlzYWJsZWRdOm9wYWNpdHktNTBcIixcbiAgICAgIGNsYXNzTmFtZVxuICAgICl9XG4gICAgY2hlY2tlZD17Y2hlY2tlZH1cbiAgICB7Li4ucHJvcHN9XG4gID5cbiAgICA8c3BhbiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBsZWZ0LTIgZmxleCBoLTMuNSB3LTMuNSBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIj5cbiAgICAgIDxNZW51YmFyUHJpbWl0aXZlLkl0ZW1JbmRpY2F0b3I+XG4gICAgICAgIDxDaGVjayBjbGFzc05hbWU9XCJoLTQgdy00XCIgLz5cbiAgICAgIDwvTWVudWJhclByaW1pdGl2ZS5JdGVtSW5kaWNhdG9yPlxuICAgIDwvc3Bhbj5cbiAgICB7Y2hpbGRyZW59XG4gIDwvTWVudWJhclByaW1pdGl2ZS5DaGVja2JveEl0ZW0+XG4pKVxuTWVudWJhckNoZWNrYm94SXRlbS5kaXNwbGF5TmFtZSA9IE1lbnViYXJQcmltaXRpdmUuQ2hlY2tib3hJdGVtLmRpc3BsYXlOYW1lXG5cbmNvbnN0IE1lbnViYXJSYWRpb0l0ZW0gPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBNZW51YmFyUHJpbWl0aXZlLlJhZGlvSXRlbT4sXG4gIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgTWVudWJhclByaW1pdGl2ZS5SYWRpb0l0ZW0+XG4+KCh7IGNsYXNzTmFtZSwgY2hpbGRyZW4sIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICA8TWVudWJhclByaW1pdGl2ZS5SYWRpb0l0ZW1cbiAgICByZWY9e3JlZn1cbiAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgXCJyZWxhdGl2ZSBmbGV4IGN1cnNvci1kZWZhdWx0IHNlbGVjdC1ub25lIGl0ZW1zLWNlbnRlciByb3VuZGVkLXNtIHB5LTEuNSBwbC04IHByLTIgdGV4dC1zbSBvdXRsaW5lLW5vbmUgZm9jdXM6YmctYWNjZW50IGZvY3VzOnRleHQtYWNjZW50LWZvcmVncm91bmQgZGF0YS1bZGlzYWJsZWRdOnBvaW50ZXItZXZlbnRzLW5vbmUgZGF0YS1bZGlzYWJsZWRdOm9wYWNpdHktNTBcIixcbiAgICAgIGNsYXNzTmFtZVxuICAgICl9XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPHNwYW4gY2xhc3NOYW1lPVwiYWJzb2x1dGUgbGVmdC0yIGZsZXggaC0zLjUgdy0zLjUgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCI+XG4gICAgICA8TWVudWJhclByaW1pdGl2ZS5JdGVtSW5kaWNhdG9yPlxuICAgICAgICA8Q2lyY2xlIGNsYXNzTmFtZT1cImgtMiB3LTIgZmlsbC1jdXJyZW50XCIgLz5cbiAgICAgIDwvTWVudWJhclByaW1pdGl2ZS5JdGVtSW5kaWNhdG9yPlxuICAgIDwvc3Bhbj5cbiAgICB7Y2hpbGRyZW59XG4gIDwvTWVudWJhclByaW1pdGl2ZS5SYWRpb0l0ZW0+XG4pKVxuTWVudWJhclJhZGlvSXRlbS5kaXNwbGF5TmFtZSA9IE1lbnViYXJQcmltaXRpdmUuUmFkaW9JdGVtLmRpc3BsYXlOYW1lXG5cbmNvbnN0IE1lbnViYXJMYWJlbCA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIE1lbnViYXJQcmltaXRpdmUuTGFiZWw+LFxuICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIE1lbnViYXJQcmltaXRpdmUuTGFiZWw+ICYge1xuICAgIGluc2V0PzogYm9vbGVhblxuICB9XG4+KCh7IGNsYXNzTmFtZSwgaW5zZXQsIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICA8TWVudWJhclByaW1pdGl2ZS5MYWJlbFxuICAgIHJlZj17cmVmfVxuICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICBcInB4LTIgcHktMS41IHRleHQtc20gZm9udC1zZW1pYm9sZFwiLFxuICAgICAgaW5zZXQgJiYgXCJwbC04XCIsXG4gICAgICBjbGFzc05hbWVcbiAgICApfVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbikpXG5NZW51YmFyTGFiZWwuZGlzcGxheU5hbWUgPSBNZW51YmFyUHJpbWl0aXZlLkxhYmVsLmRpc3BsYXlOYW1lXG5cbmNvbnN0IE1lbnViYXJTZXBhcmF0b3IgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBNZW51YmFyUHJpbWl0aXZlLlNlcGFyYXRvcj4sXG4gIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgTWVudWJhclByaW1pdGl2ZS5TZXBhcmF0b3I+XG4+KCh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxNZW51YmFyUHJpbWl0aXZlLlNlcGFyYXRvclxuICAgIHJlZj17cmVmfVxuICAgIGNsYXNzTmFtZT17Y24oXCItbXgtMSBteS0xIGgtcHggYmctbXV0ZWRcIiwgY2xhc3NOYW1lKX1cbiAgICB7Li4ucHJvcHN9XG4gIC8+XG4pKVxuTWVudWJhclNlcGFyYXRvci5kaXNwbGF5TmFtZSA9IE1lbnViYXJQcmltaXRpdmUuU2VwYXJhdG9yLmRpc3BsYXlOYW1lXG5cbmNvbnN0IE1lbnViYXJTaG9ydGN1dCA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgLi4ucHJvcHNcbn06IFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxTcGFuRWxlbWVudD4pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8c3BhblxuICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgXCJtbC1hdXRvIHRleHQteHMgdHJhY2tpbmctd2lkZXN0IHRleHQtbXV0ZWQtZm9yZWdyb3VuZFwiLFxuICAgICAgICBjbGFzc05hbWVcbiAgICAgICl9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgLz5cbiAgKVxufVxuTWVudWJhclNob3J0Y3V0LmRpc3BsYXluYW1lID0gXCJNZW51YmFyU2hvcnRjdXRcIlxuXG5leHBvcnQge1xuICBNZW51YmFyLFxuICBNZW51YmFyTWVudSxcbiAgTWVudWJhclRyaWdnZXIsXG4gIE1lbnViYXJDb250ZW50LFxuICBNZW51YmFySXRlbSxcbiAgTWVudWJhclNlcGFyYXRvcixcbiAgTWVudWJhckxhYmVsLFxuICBNZW51YmFyQ2hlY2tib3hJdGVtLFxuICBNZW51YmFyUmFkaW9Hcm91cCxcbiAgTWVudWJhclJhZGlvSXRlbSxcbiAgTWVudWJhclBvcnRhbCxcbiAgTWVudWJhclN1YkNvbnRlbnQsXG4gIE1lbnViYXJTdWJUcmlnZ2VyLFxuICBNZW51YmFyR3JvdXAsXG4gIE1lbnViYXJTdWIsXG4gIE1lbnViYXJTaG9y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