function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import * as React from "react";
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import { cn } from "../../lib/utils";
import { toggleVariants } from "../components/ui/toggle";
const ToggleGroupContext = /*#__PURE__*/React.createContext({
  size: "default",
  variant: "default"
});
const ToggleGroup = /*#__PURE__*/React.forwardRef(({
  className,
  variant,
  size,
  children,
  ...props
}, ref) => /*#__PURE__*/React.createElement(ToggleGroupPrimitive.Root, _extends({
  ref: ref,
  className: cn("flex items-center justify-center gap-1", className)
}, props), /*#__PURE__*/React.createElement(ToggleGroupContext.Provider, {
  value: {
    variant,
    size
  }
}, children)));
ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;
const ToggleGroupItem = /*#__PURE__*/React.forwardRef(({
  className,
  children,
  variant,
  size,
  ...props
}, ref) => {
  const context = React.useContext(ToggleGroupContext);
  return /*#__PURE__*/React.createElement(ToggleGroupPrimitive.Item, _extends({
    ref: ref,
    className: cn(toggleVariants({
      variant: context.variant || variant,
      size: context.size || size
    }), className)
  }, props), children);
});
ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;
export { ToggleGroup, ToggleGroupItem };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIlRvZ2dsZUdyb3VwUHJpbWl0aXZlIiwiY24iLCJ0b2dnbGVWYXJpYW50cyIsIlRvZ2dsZUdyb3VwQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJzaXplIiwidmFyaWFudCIsIlRvZ2dsZUdyb3VwIiwiZm9yd2FyZFJlZiIsImNsYXNzTmFtZSIsImNoaWxkcmVuIiwicHJvcHMiLCJyZWYiLCJjcmVhdGVFbGVtZW50IiwiUm9vdCIsIl9leHRlbmRzIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsImRpc3BsYXlOYW1lIiwiVG9nZ2xlR3JvdXBJdGVtIiwiY29udGV4dCIsInVzZUNvbnRleHQiLCJJdGVtIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdWkvdG9nZ2xlLWdyb3VwLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0ICogYXMgVG9nZ2xlR3JvdXBQcmltaXRpdmUgZnJvbSBcIkByYWRpeC11aS9yZWFjdC10b2dnbGUtZ3JvdXBcIlxuaW1wb3J0IHsgdHlwZSBWYXJpYW50UHJvcHMgfSBmcm9tIFwiY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5XCJcblxuaW1wb3J0IHsgY24gfSBmcm9tIFwiQC9saWIvdXRpbHNcIlxuaW1wb3J0IHsgdG9nZ2xlVmFyaWFudHMgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3RvZ2dsZVwiXG5cbmNvbnN0IFRvZ2dsZUdyb3VwQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8XG4gIFZhcmlhbnRQcm9wczx0eXBlb2YgdG9nZ2xlVmFyaWFudHM+XG4+KHtcbiAgc2l6ZTogXCJkZWZhdWx0XCIsXG4gIHZhcmlhbnQ6IFwiZGVmYXVsdFwiLFxufSlcblxuY29uc3QgVG9nZ2xlR3JvdXAgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBUb2dnbGVHcm91cFByaW1pdGl2ZS5Sb290PixcbiAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBUb2dnbGVHcm91cFByaW1pdGl2ZS5Sb290PiAmXG4gICAgVmFyaWFudFByb3BzPHR5cGVvZiB0b2dnbGVWYXJpYW50cz5cbj4oKHsgY2xhc3NOYW1lLCB2YXJpYW50LCBzaXplLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gIDxUb2dnbGVHcm91cFByaW1pdGl2ZS5Sb290XG4gICAgcmVmPXtyZWZ9XG4gICAgY2xhc3NOYW1lPXtjbihcImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGdhcC0xXCIsIGNsYXNzTmFtZSl9XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPFRvZ2dsZUdyb3VwQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyB2YXJpYW50LCBzaXplIH19PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvVG9nZ2xlR3JvdXBDb250ZXh0LlByb3ZpZGVyPlxuICA8L1RvZ2dsZUdyb3VwUHJpbWl0aXZlLlJvb3Q+XG4pKVxuXG5Ub2dnbGVHcm91cC5kaXNwbGF5TmFtZSA9IFRvZ2dsZUdyb3VwUHJpbWl0aXZlLlJvb3QuZGlzcGxheU5hbWVcblxuY29uc3QgVG9nZ2xlR3JvdXBJdGVtID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgVG9nZ2xlR3JvdXBQcmltaXRpdmUuSXRlbT4sXG4gIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgVG9nZ2xlR3JvdXBQcmltaXRpdmUuSXRlbT4gJlxuICAgIFZhcmlhbnRQcm9wczx0eXBlb2YgdG9nZ2xlVmFyaWFudHM+XG4+KCh7IGNsYXNzTmFtZSwgY2hpbGRyZW4sIHZhcmlhbnQsIHNpemUsIC4uLnByb3BzIH0sIHJlZikgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChUb2dnbGVHcm91cENvbnRleHQpXG5cbiAgcmV0dXJuIChcbiAgICA8VG9nZ2xlR3JvdXBQcmltaXRpdmUuSXRlbVxuICAgICAgcmVmPXtyZWZ9XG4gICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICB0b2dnbGVWYXJpYW50cyh7XG4gICAgICAgICAgdmFyaWFudDogY29udGV4dC52YXJpYW50IHx8IHZhcmlhbnQsXG4gICAgICAgICAgc2l6ZTogY29udGV4dC5zaXplIHx8IHNpemUsXG4gICAgICAgIH0pLFxuICAgICAgICBjbGFzc05hbWVcbiAgICAgICl9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvVG9nZ2xlR3JvdXBQcmltaXRpdmUuSXRlbT5cbiAgKVxufSlcblxuVG9nZ2xlR3JvdXBJdGVtLmRpc3BsYXlOYW1lID0gVG9nZ2xlR3JvdXBQcmltaXRpdmUuSXRlbS5kaXNwbGF5TmFtZVxuXG5leHBvcnQgeyBUb2dnbGVHcm91cCwgVG9nZ2xlR3JvdXBJdGVtIH1cbiJdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sS0FBS0EsS0FBSyxNQUFNLE9BQU87QUFDOUIsT0FBTyxLQUFLQyxvQkFBb0IsTUFBTSw4QkFBOEI7QUFHcEUsU0FBU0MsRUFBRSxRQUFRLGFBQWE7QUFDaEMsU0FBU0MsY0FBYyxRQUFRLHdCQUF3QjtBQUV2RCxNQUFNQyxrQkFBa0IsZ0JBQUdKLEtBQUssQ0FBQ0ssYUFBYSxDQUU1QztFQUNBQyxJQUFJLEVBQUUsU0FBUztFQUNmQyxPQUFPLEVBQUU7QUFDWCxDQUFDLENBQUM7QUFFRixNQUFNQyxXQUFXLGdCQUFHUixLQUFLLENBQUNTLFVBQVUsQ0FJbEMsQ0FBQztFQUFFQyxTQUFTO0VBQUVILE9BQU87RUFBRUQsSUFBSTtFQUFFSyxRQUFRO0VBQUUsR0FBR0M7QUFBTSxDQUFDLEVBQUVDLEdBQUcsa0JBQ3REYixLQUFBLENBQUFjLGFBQUEsQ0FBQ2Isb0JBQW9CLENBQUNjLElBQUksRUFBQUMsUUFBQTtFQUN4QkgsR0FBRyxFQUFFQSxHQUFJO0VBQ1RILFNBQVMsRUFBRVIsRUFBRSxDQUFDLHdDQUF3QyxFQUFFUSxTQUFTO0FBQUUsR0FDL0RFLEtBQUssZ0JBRVRaLEtBQUEsQ0FBQWMsYUFBQSxDQUFDVixrQkFBa0IsQ0FBQ2EsUUFBUTtFQUFDQyxLQUFLLEVBQUU7SUFBRVgsT0FBTztJQUFFRDtFQUFLO0FBQUUsR0FDbkRLLFFBQzBCLENBQ0osQ0FDNUIsQ0FBQztBQUVGSCxXQUFXLENBQUNXLFdBQVcsR0FBR2xCLG9CQUFvQixDQUFDYyxJQUFJLENBQUNJLFdBQVc7QUFFL0QsTUFBTUMsZUFBZSxnQkFBR3BCLEtBQUssQ0FBQ1MsVUFBVSxDQUl0QyxDQUFDO0VBQUVDLFNBQVM7RUFBRUMsUUFBUTtFQUFFSixPQUFPO0VBQUVELElBQUk7RUFBRSxHQUFHTTtBQUFNLENBQUMsRUFBRUMsR0FBRyxLQUFLO0VBQzNELE1BQU1RLE9BQU8sR0FBR3JCLEtBQUssQ0FBQ3NCLFVBQVUsQ0FBQ2xCLGtCQUFrQixDQUFDO0VBRXBELG9CQUNFSixLQUFBLENBQUFjLGFBQUEsQ0FBQ2Isb0JBQW9CLENBQUNzQixJQUFJLEVBQUFQLFFBQUE7SUFDeEJILEdBQUcsRUFBRUEsR0FBSTtJQUNUSCxTQUFTLEVBQUVSLEVBQUUsQ0FDWEMsY0FBYyxDQUFDO01BQ2JJLE9BQU8sRUFBRWMsT0FBTyxDQUFDZCxPQUFPLElBQUlBLE9BQU87TUFDbkNELElBQUksRUFBRWUsT0FBTyxDQUFDZixJQUFJLElBQUlBO0lBQ3hCLENBQUMsQ0FBQyxFQUNGSSxTQUNGO0VBQUUsR0FDRUUsS0FBSyxHQUVSRCxRQUN3QixDQUFDO0FBRWhDLENBQUMsQ0FBQztBQUVGUyxlQUFlLENBQUNELFdBQVcsR0FBR2xCLG9CQUFvQixDQUFDc0IsSUFBSSxDQUFDSixXQUFXO0FBRW5FLFNBQVNYLFdBQVcsRUFBRVksZUFBZSIsImlnbm9yZUxpc3QiOltdfQ==