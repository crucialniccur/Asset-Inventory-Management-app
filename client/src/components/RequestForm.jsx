import React, { useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { FileText, Package, Wrench, CheckCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
const RequestForm = ({
  onSubmit
}) => {
  const {
    user
  } = useAuth();
  const {
    toast
  } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    type: '',
    category: '',
    title: '',
    description: '',
    quantity: 1,
    urgency: 'medium',
    justification: '',
    estimatedCost: '',
    assetId: '' // For repair requests
  });
  const handleSubmit = async e => {
    e.preventDefault();
    if (!formData.type || !formData.title || !formData.description) {
      toast({
        title: "Error",
        description: "Please fill in all required fields.",
        variant: "destructive"
      });
      return;
    }
    setIsSubmitting(true);

    // Mock API call
    setTimeout(() => {
      toast({
        title: "Request Submitted",
        description: "Your request has been submitted and is pending review."
      });

      // Reset form
      setFormData({
        type: '',
        category: '',
        title: '',
        description: '',
        quantity: 1,
        urgency: 'medium',
        justification: '',
        estimatedCost: '',
        assetId: ''
      });
      setIsSubmitting(false);
      onSubmit?.();
    }, 1500);
  };
  const getUrgencyColor = urgency => {
    switch (urgency) {
      case 'low':
        return 'text-green-600';
      case 'medium':
        return 'text-yellow-600';
      case 'high':
        return 'text-red-600';
      default:
        return 'text-gray-600';
    }
  };
  return /*#__PURE__*/React.createElement("div", {
    className: "p-6 max-w-2xl mx-auto"
  }, /*#__PURE__*/React.createElement("div", {
    className: "mb-6"
  }, /*#__PURE__*/React.createElement("h1", {
    className: "text-3xl font-bold mb-2"
  }, "Submit Request"), /*#__PURE__*/React.createElement("p", {
    className: "text-muted-foreground"
  }, "Request new assets or repairs for existing ones")), /*#__PURE__*/React.createElement("form", {
    onSubmit: handleSubmit,
    className: "space-y-6"
  }, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(CardHeader, null, /*#__PURE__*/React.createElement(CardTitle, {
    className: "flex items-center gap-2"
  }, /*#__PURE__*/React.createElement(FileText, {
    className: "h-5 w-5"
  }), "Request Type"), /*#__PURE__*/React.createElement(CardDescription, null, "What type of request are you making?")), /*#__PURE__*/React.createElement(CardContent, null, /*#__PURE__*/React.createElement(RadioGroup, {
    value: formData.type,
    onValueChange: value => setFormData({
      ...formData,
      type: value
    }),
    className: "grid grid-cols-2 gap-4"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex items-center space-x-2 p-4 border rounded-lg hover:bg-muted/50"
  }, /*#__PURE__*/React.createElement(RadioGroupItem, {
    value: "new_asset",
    id: "new_asset"
  }), /*#__PURE__*/React.createElement(Label, {
    htmlFor: "new_asset",
    className: "flex-1 cursor-pointer"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex items-center gap-2"
  }, /*#__PURE__*/React.createElement(Package, {
    className: "h-4 w-4 text-primary"
  }), /*#__PURE__*/React.createElement("span", {
    className: "font-medium"
  }, "New Asset")), /*#__PURE__*/React.createElement("p", {
    className: "text-xs text-muted-foreground mt-1"
  }, "Request a new asset for your department"))), /*#__PURE__*/React.createElement("div", {
    className: "flex items-center space-x-2 p-4 border rounded-lg hover:bg-muted/50"
  }, /*#__PURE__*/React.createElement(RadioGroupItem, {
    value: "repair",
    id: "repair"
  }), /*#__PURE__*/React.createElement(Label, {
    htmlFor: "repair",
    className: "flex-1 cursor-pointer"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex items-center gap-2"
  }, /*#__PURE__*/React.createElement(Wrench, {
    className: "h-4 w-4 text-primary"
  }), /*#__PURE__*/React.createElement("span", {
    className: "font-medium"
  }, "Repair Request")), /*#__PURE__*/React.createElement("p", {
    className: "text-xs text-muted-foreground mt-1"
  }, "Request repair for an existing asset")))))), /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(CardHeader, null, /*#__PURE__*/React.createElement(CardTitle, null, "Request Details")), /*#__PURE__*/React.createElement(CardContent, {
    className: "space-y-4"
  }, formData.type === 'new_asset' && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Label, {
    htmlFor: "category"
  }, "Asset Category *"), /*#__PURE__*/React.createElement(Select, {
    value: formData.category,
    onValueChange: value => setFormData({
      ...formData,
      category: value
    })
  }, /*#__PURE__*/React.createElement(SelectTrigger, null, /*#__PURE__*/React.createElement(SelectValue, {
    placeholder: "Select category"
  })), /*#__PURE__*/React.createElement(SelectContent, null, /*#__PURE__*/React.createElement(SelectItem, {
    value: "electronics"
  }, "Electronics"), /*#__PURE__*/React.createElement(SelectItem, {
    value: "furniture"
  }, "Furniture"), /*#__PURE__*/React.createElement(SelectItem, {
    value: "software"
  }, "Software"), /*#__PURE__*/React.createElement(SelectItem, {
    value: "equipment"
  }, "Equipment"), /*#__PURE__*/React.createElement(SelectItem, {
    value: "supplies"
  }, "Office Supplies"), /*#__PURE__*/React.createElement(SelectItem, {
    value: "other"
  }, "Other")))), formData.type === 'repair' && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Label, {
    htmlFor: "assetId"
  }, "Asset to Repair *"), /*#__PURE__*/React.createElement(Select, {
    value: formData.assetId,
    onValueChange: value => setFormData({
      ...formData,
      assetId: value
    })
  }, /*#__PURE__*/React.createElement(SelectTrigger, null, /*#__PURE__*/React.createElement(SelectValue, {
    placeholder: "Select asset"
  })), /*#__PURE__*/React.createElement(SelectContent, null, /*#__PURE__*/React.createElement(SelectItem, {
    value: "1"
  }, "Dell Laptop XPS 13 - DLL-XPS13-2024-001"), /*#__PURE__*/React.createElement(SelectItem, {
    value: "2"
  }, "HP Printer LaserJet - HP-LJ-2024-002"), /*#__PURE__*/React.createElement(SelectItem, {
    value: "3"
  }, "Office Chair Ergonomic - OFC-CHAIR-2024-003")))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Label, {
    htmlFor: "title"
  }, "Request Title *"), /*#__PURE__*/React.createElement(Input, {
    id: "title",
    value: formData.title,
    onChange: e => setFormData({
      ...formData,
      title: e.target.value
    }),
    placeholder: "Brief description of what you need"
  })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Label, {
    htmlFor: "description"
  }, "Detailed Description *"), /*#__PURE__*/React.createElement(Textarea, {
    id: "description",
    value: formData.description,
    onChange: e => setFormData({
      ...formData,
      description: e.target.value
    }),
    placeholder: "Provide detailed information about your request...",
    rows: 4
  })), formData.type === 'new_asset' && /*#__PURE__*/React.createElement("div", {
    className: "grid grid-cols-2 gap-4"
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Label, {
    htmlFor: "quantity"
  }, "Quantity"), /*#__PURE__*/React.createElement(Input, {
    id: "quantity",
    type: "number",
    min: "1",
    value: formData.quantity,
    onChange: e => setFormData({
      ...formData,
      quantity: parseInt(e.target.value) || 1
    })
  })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Label, {
    htmlFor: "estimatedCost"
  }, "Estimated Cost (Optional)"), /*#__PURE__*/React.createElement(Input, {
    id: "estimatedCost",
    type: "number",
    step: "0.01",
    value: formData.estimatedCost,
    onChange: e => setFormData({
      ...formData,
      estimatedCost: e.target.value
    }),
    placeholder: "0.00"
  }))))), /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(CardHeader, null, /*#__PURE__*/React.createElement(CardTitle, null, "Priority & Justification")), /*#__PURE__*/React.createElement(CardContent, {
    className: "space-y-4"
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Label, {
    className: "text-base font-medium"
  }, "Urgency Level"), /*#__PURE__*/React.createElement(RadioGroup, {
    value: formData.urgency,
    onValueChange: value => setFormData({
      ...formData,
      urgency: value
    }),
    className: "mt-2"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex items-center space-x-2"
  }, /*#__PURE__*/React.createElement(RadioGroupItem, {
    value: "low",
    id: "low"
  }), /*#__PURE__*/React.createElement(Label, {
    htmlFor: "low",
    className: "flex items-center gap-2 cursor-pointer"
  }, /*#__PURE__*/React.createElement("div", {
    className: "w-3 h-3 rounded-full bg-green-500"
  }), /*#__PURE__*/React.createElement("span", null, "Low - Can wait weeks"))), /*#__PURE__*/React.createElement("div", {
    className: "flex items-center space-x-2"
  }, /*#__PURE__*/React.createElement(RadioGroupItem, {
    value: "medium",
    id: "medium"
  }), /*#__PURE__*/React.createElement(Label, {
    htmlFor: "medium",
    className: "flex items-center gap-2 cursor-pointer"
  }, /*#__PURE__*/React.createElement("div", {
    className: "w-3 h-3 rounded-full bg-yellow-500"
  }), /*#__PURE__*/React.createElement("span", null, "Medium - Needed within days"))), /*#__PURE__*/React.createElement("div", {
    className: "flex items-center space-x-2"
  }, /*#__PURE__*/React.createElement(RadioGroupItem, {
    value: "high",
    id: "high"
  }), /*#__PURE__*/React.createElement(Label, {
    htmlFor: "high",
    className: "flex items-center gap-2 cursor-pointer"
  }, /*#__PURE__*/React.createElement("div", {
    className: "w-3 h-3 rounded-full bg-red-500"
  }), /*#__PURE__*/React.createElement("span", null, "High - Urgent, needed immediately"))))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Label, {
    htmlFor: "justification"
  }, "Business Justification"), /*#__PURE__*/React.createElement(Textarea, {
    id: "justification",
    value: formData.justification,
    onChange: e => setFormData({
      ...formData,
      justification: e.target.value
    }),
    placeholder: "Explain why this request is necessary for your work...",
    rows: 3
  })))), /*#__PURE__*/React.createElement("div", {
    className: "flex items-center justify-between pt-6"
  }, /*#__PURE__*/React.createElement("div", {
    className: "text-sm text-muted-foreground"
  }, /*#__PURE__*/React.createElement("p", null, "Request will be reviewed by the procurement team")), /*#__PURE__*/React.createElement(Button, {
    type: "submit",
    disabled: isSubmitting || !formData.type || !formData.title || !formData.description,
    className: "bg-gradient-primary hover:opacity-90 min-w-[120px]"
  }, isSubmitting ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"
  }), "Submitting...") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CheckCircle, {
    className: "h-4 w-4 mr-2"
  }), "Submit Request")))));
};
export default RequestForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,